> drop database if EXISTS procedure_test_db;
DROP DATABASE
> create database procedure_test_db;
CREATE DATABASE
> use procedure_test_db;
SET
> CREATE TABLE employees(id int64 PRIMARY KEY, name VARCHAR(100), age INT, salary decimal(10,2));
CREATE TABLE
> create table test_t1(a int);
CREATE TABLE
> DROP PROCEDURE IF EXISTS process_txn_example1;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example1() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM employees; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example1();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
(1 row)
> DROP PROCEDURE process_txn_example1;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example2;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example2() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 111, 3.2); SELECT * FROM employees; ROLLBACK; END;
CREATE PROCEDURE
> call process_txn_example2();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 | 111 |   3.20
(2 rows)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
(1 row)
> DROP PROCEDURE process_txn_example2;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example3;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example3() BEGIN INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 111, 3.2); SELECT * FROM employees; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example3();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
(2 rows)
(error encountered after some results were delivered)
ERROR: the explicit transaction of the procedure was not opened
SQLSTATE: 42601
> DROP PROCEDURE process_txn_example3;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example4;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example4() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (4, 'test111', 111, 3.2); SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_txn_example4();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   4 | test111 | 111 |   3.20
(3 rows)
(error encountered after some results were delivered)
ERROR: procedure explicit transaction has not been ended, please check explicit transaction start statements.
> DROP PROCEDURE process_txn_example4;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example5;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example5() BEGIN START TRANSACTION; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 555, 5.2); SELECT * FROM employees; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example5();
ERROR: procedure explicit transaction has been started, please check if there are multiple explicit transaction start statements.
SQLSTATE: 42601
> DROP PROCEDURE process_txn_example5;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example6;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example6() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (6, 'test111', 66, 3.2); SELECT * FROM employees; COMMIT; ROLLBACK; END;
CREATE PROCEDURE
> call process_txn_example6();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
(3 rows)
(error encountered after some results were delivered)
ERROR: the explicit transaction of the procedure has either been ended, please check if the transaction commit/rollback statements are used correctly.
SQLSTATE: 42601
> DROP PROCEDURE process_txn_example6;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example7;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example7() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', 77, 3.2); SELECT * FROM employees; COMMIT; END;
CREATE PROCEDURE
> START TRANSACTION;
BEGIN
> call process_txn_example7();
ERROR: Call Procedure statement is not supported in explicit transaction
SQLSTATE: 0A000
> COMMIT;
ROLLBACK
> COMMIT;
ERROR: there is no transaction in progress
> DROP PROCEDURE process_txn_example7;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example8;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example8() BEGIN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (8, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (8, 'test111', 111, 3.2); SELECT * FROM employees; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example8();
ERROR: duplicate key value (id)=(8) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
(3 rows)
> DROP PROCEDURE process_txn_example8;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example9;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example9() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err = -1; COMMIT; ENDHANDLER; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (9, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; END;
CREATE PROCEDURE
> call process_txn_example9();
  err
-------
   -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
   9 | test111 | 111 |   3.20
(4 rows)
> DROP PROCEDURE process_txn_example9;
DROP PROCEDURE
> create table test_t1(a int);
ERROR: relation "test_t1" already exists
SQLSTATE: 42P07
> DROP PROCEDURE IF EXISTS process_txn_example10;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example10() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err = -2; ROLLBACK; ENDHANDLER; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (10, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; END;
CREATE PROCEDURE
> call process_txn_example10();
  err
-------
   -2
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
   9 | test111 | 111 |   3.20
(4 rows)
> DROP PROCEDURE process_txn_example10;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example11;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example11() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err=-1; INSERT INTO employees (id, name, age, salary) VALUES (11, 'test111', 111, 3.2); COMMIT; ENDHANDLER; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (11, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; END;
CREATE PROCEDURE
> call process_txn_example11();
ERROR: duplicate key value (id)=(11) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
   9 | test111 | 111 |   3.20
(4 rows)
> DROP PROCEDURE process_txn_example11;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example12;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example12() BEGIN DECLARE i int DEFAULT 0; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (12, 'test111', 111, 3.2); WHILE i < 3 DO if i = 2 THEN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (12, 'test111', 111, 3.2); COMMIT; ENDIF; SET i=i+1; ENDWHILE; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example12();
ERROR: procedure explicit transaction has been started, please check if there are multiple explicit transaction start statements.
SQLSTATE: 42601
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
   9 | test111 | 111 |   3.20
(4 rows)
> DROP PROCEDURE process_txn_example12;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example13;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example13() BEGIN DECLARE i int DEFAULT 14; INSERT INTO employees (id, name, age, salary) VALUES (13, 'test111', 111, 3.2); WHILE i < 20 DO START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); COMMIT; SET i=i+1; ENDWHILE; END;
CREATE PROCEDURE
> call process_txn_example13();
CALL PROCEDURE
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   6 | test111 |  66 |   3.20
   9 | test111 | 111 |   3.20
  13 | test111 | 111 |   3.20
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  17 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
(11 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 11
> DROP PROCEDURE process_txn_example13;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example14;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example14() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN START TRANSACTION; SET err = -1; INSERT INTO employees (id, name, age, salary) VALUES (15, 'test111', 111, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (14, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example14();
  err
-------
   -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
(2 rows)
> DROP PROCEDURE process_txn_example14;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example15;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example15() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN START TRANSACTION; SET err = -1; INSERT INTO employees (id, name, age, salary) VALUES (17, 'test111', 111, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (16, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; ROLLBACK; END;
CREATE PROCEDURE
> call process_txn_example15();
  err
-------
   -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
(3 rows)
> DROP PROCEDURE process_txn_example15;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example16;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example16() BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN START TRANSACTION; SET err = -1; INSERT INTO employees (id, name, age, salary) VALUES (18, 'test111', 111, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (18, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example16();
ERROR: duplicate key value (id)=(18) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
(4 rows)
> DROP PROCEDURE process_txn_example16;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example17;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example17() BEGIN DECLARE err int DEFAULT 0; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (19, 'test111', 111, 3.2); IF err=0 THEN COMMIT; ENDIF; END;
CREATE PROCEDURE
> call process_txn_example17();
CALL PROCEDURE
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
(5 rows)
> DROP PROCEDURE process_txn_example17;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example18;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example18() BEGIN DECLARE err int DEFAULT 0; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (20, 'test111', 111, 3.2); IF err=0 THEN ROLLBACK; ENDIF; END;
CREATE PROCEDURE
> call process_txn_example18();
CALL PROCEDURE
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
(5 rows)
> DROP PROCEDURE process_txn_example18;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example19;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example19() BEGIN DECLARE err int DEFAULT 0; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (21, 'test111', 111, 3.2); IF err=0 THEN INSERT INTO employees (id, name, age, salary) VALUES (21, 'test111', 111, 3.2); ENDIF; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example19();
ERROR: duplicate key value (id)=(21) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
(5 rows)
> DROP PROCEDURE process_txn_example19;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example20;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example20() BEGIN DECLARE err int DEFAULT 0; IF err=0 THEN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (22, 'test111', 111, 3.2); ENDIF; COMMIT; END;
CREATE PROCEDURE
> call process_txn_example20();
CALL PROCEDURE
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
  22 | test111 | 111 |   3.20
(6 rows)
> DROP PROCEDURE process_txn_example20;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example21;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example21() BEGIN DECLARE err int DEFAULT 0; IF err=0 THEN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (23, 'test111', 111, 3.2); ENDIF; ROLLBACK; END;
CREATE PROCEDURE
> call process_txn_example21();
CALL PROCEDURE
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
  22 | test111 | 111 |   3.20
(6 rows)
> DROP PROCEDURE process_txn_example21;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example22;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example22() BEGIN DECLARE err int DEFAULT 0; IF err=0 THEN START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (24, 'test111', 111, 3.2); ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (24, 'test111', 111, 3.2); COMMIT; END;
CREATE PROCEDURE
> call process_txn_example22();
ERROR: duplicate key value (id)=(24) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
  22 | test111 | 111 |   3.20
(6 rows)
> DROP PROCEDURE process_txn_example22;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example23;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example23() BEGIN DECLARE err int DEFAULT 0; START TRANSACTION; INSERT INTO employees (id, name, age, salary) VALUES (25, 'test111', 111, 3.2); SET err=1; ROLLBACK; select err; END;
CREATE PROCEDURE
> call process_txn_example23();
  err
-------
    1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
  22 | test111 | 111 |   3.20
(6 rows)
> DROP PROCEDURE process_txn_example23;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_txn_example24;
DROP PROCEDURE
> CREATE PROCEDURE process_txn_example24() BEGIN DECLARE i INT DEFAULT 26; WHILE i < 30 DO INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); SET i=i+1; ENDWHILE; INSERT INTO employees (id, name, age, salary) VALUES (26, 'test111', 111, 3.2); END;
CREATE PROCEDURE
> call process_txn_example24();
ERROR: duplicate key value (id)=(26) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
  14 | test111 | 111 |   3.20
  15 | test111 | 111 |   3.20
  16 | test111 | 111 |   3.20
  18 | test111 | 111 |   3.20
  19 | test111 | 111 |   3.20
  22 | test111 | 111 |   3.20
  26 | test111 | 111 |   3.20
  27 | test111 | 111 |   3.20
  28 | test111 | 111 |   3.20
  29 | test111 | 111 |   3.20
(10 rows)
> DROP PROCEDURE process_txn_example24;
DROP PROCEDURE
> create table t1(a int, b int);
CREATE TABLE
> create table t2(a int, b int, c int);
CREATE TABLE
> insert into t1 values (1, 2), (3, 4);
INSERT 2
> insert into t2 values (1, 2, 3), (4, 5, 6);
INSERT 2
> create table t3(a int, b int, c int);
CREATE TABLE
> DROP PROCEDURE IF EXISTS txn_test;
DROP PROCEDURE
> create procedure txn_test() label test: begin declare a int default 0; declare b int default 0; declare err int default 0; declare exit HANDLER FOR NOT FOUND,SQLEXCEPTION BEGIN SET err = -1; SELECT a,b; ROLLBACK; ENDHANDLER; START TRANSACTION; SET a = 10; select a, b FROM t1; UPDATE t1 SET a =  a + 1 WHERE b > 0; insert into t1 values (a, b); label my_loop: WHILE b <= 10 DO declare d int; SET d = b + 2; if d > 9 then select * FROM t1; leave my_loop; elsif b > 5 then select * FROM t2; endif; SET b = b + 1; ENDWHILE; IF err = 0 THEN SELECT a,b; COMMIT; ENDIF; end;
CREATE PROCEDURE
> call txn_test();
  a | b
----+----
  1 | 2
  3 | 4
(2 rows)
  a | b | c
----+---+----
  1 | 2 | 3
  4 | 5 | 6
(2 rows)
  a | b | c
----+---+----
  1 | 2 | 3
  4 | 5 | 6
(2 rows)
  a | b
----+----
  1 | 2
  3 | 4
(2 rows)
  a  | b
-----+----
  10 | 8
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 10
> DROP PROCEDURE txn_test;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example1;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example1()
BEGIN DECLARE err int DEFAULT 0; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err = -1; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM employees; SELECT * FROM test_t1; SELECT err; END;
CREATE PROCEDURE
> call process_handler_example1();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
(1 row)
  err
-------
   -1
(1 row)
> DROP PROCEDURE process_handler_example1;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example2;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example2()
BEGIN DECLARE err int DEFAULT 0; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err = -1; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 111, 3.2); SELECT * FROM employees;SELECT * FROM test_t1; SELECT err; END;
CREATE PROCEDURE
> call process_handler_example2();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 | 111 |   3.20
(2 rows)
> DROP PROCEDURE process_handler_example2;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example3;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example3()
BEGIN DECLARE err int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET err = -1; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 111, 3.2); WHILE i < 8 DO INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; SELECT err; END;
CREATE PROCEDURE
> call process_handler_example3();
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   4 | test111 | 111 |   3.20
   5 | test111 | 111 |   3.20
   6 | test111 | 111 |   3.20
   7 | test111 | 111 |   3.20
(7 rows)
  err
-------
   -1
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 7
> DROP PROCEDURE process_handler_example3;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example4;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example4()
BEGIN DECLARE err int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION SET err = -1; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 111, 3.2); WHILE i < 8 DO INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; SELECT err; END;
CREATE PROCEDURE
> call process_handler_example4();
ERROR: duplicate key value (id)=(5) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   3 | test111 | 111 |   3.20
   4 | test111 | 111 |   3.20
   5 | test111 | 111 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example4;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example5;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example5()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); ENDHANDLER; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err1; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 5, 3.2); WHILE i <= 6 DO INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; SELECT err2; END;
CREATE PROCEDURE
> call process_handler_example5();
  err1
--------
     0
(1 row)
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   4 | test111 | 111 |   3.20
   5 | test111 |   5 |   3.20
   6 | test111 | 111 |   3.20
   7 | test111 |  -2 |   3.20
(6 rows)
  err2
--------
    -2
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 6
> DROP PROCEDURE process_handler_example5;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example6;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example6()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); ENDHANDLER; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err1; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 5, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 111, 3.2); SELECT * FROM employees; SELECT err2; END;
CREATE PROCEDURE
> call process_handler_example6();
  err1
--------
    -1
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(5) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   5 | test111 |   5 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example6;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example7;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example7()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); ENDHANDLER; DECLARE EXIT HANDLER FOR SQLEXCEPTION  BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err1; INSERT INTO employees (id, name, age, salary) VALUES (5, 'test111', 5, 3.2); WHILE i <= 6 DO INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', 111, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; SELECT err2; END;
CREATE PROCEDURE
> call process_handler_example7();
  err1
--------
     0
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(5) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   3 | test111 | 111 |   3.20
   4 | test111 | 111 |   3.20
   5 | test111 |   5 |   3.20
   7 | test111 |  -2 |   3.20
(5 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 5
> DROP PROCEDURE process_handler_example7;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example8;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example8()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); ENDHANDLER; DECLARE EXIT HANDLER FOR NOT FOUND  BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT err1; SELECT * FROM employees; SELECT err2; END;
CREATE PROCEDURE
> call process_handler_example8();
--
(0 rows)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example8;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example9;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example9()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example9();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   7 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example9;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example10;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example10()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (7, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example10();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   7 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example10;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example11;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example11()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM test_t1; SELECT 'procedure end'; END;
CREATE PROCEDURE
> call process_handler_example11();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example11;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example12;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example12()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; SELECT * FROM test_t1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; END;
CREATE PROCEDURE
> call process_handler_example12();
  err2
--------
    -2
(1 row)
  err1
--------
    -1
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example12;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example13;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example13()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; IF i > 0 THEN DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; ENDIF; SELECT * FROM test_t1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; END;
CREATE PROCEDURE
> call process_handler_example13();
  err2
--------
    -2
(1 row)
  err1
--------
    -1
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example13;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example14;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example14()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; IF i > 0 THEN DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; SELECT * FROM test_t1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; ENDIF; END;
CREATE PROCEDURE
> call process_handler_example14();
  err2
--------
    -2
(1 row)
  err1
--------
    -1
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example14;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example15;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example15()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN SELECT * FROM test_t1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; ENDIF; END;
CREATE PROCEDURE
> call process_handler_example15();
  err2
--------
    -2
(1 row)
  err1
--------
    -1
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example15;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example16;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example16()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SELECT * FROM test_t1; ENDIF; END;
CREATE PROCEDURE
> call process_handler_example16();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example16;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example17;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example17()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); ENDIF; END;
CREATE PROCEDURE
> call process_handler_example17();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(3 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 3
> DROP PROCEDURE process_handler_example17;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example18;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example18()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SELECT * FROM test_t1; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); END;
CREATE PROCEDURE
> call process_handler_example18();
  err1
--------
    -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example18;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example19;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example19()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3; DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SELECT * FROM test_t1; SELECT 'IF END'; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example19();
  err1
--------
    -1
(1 row)
  ?column?
------------
  IF END
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example19;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example20;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example20()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SELECT * FROM test_t1; SELECT 'IF END'; ENDIF; SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example20();
  err1
--------
    -1
(1 row)
  ?column?
------------
  IF END
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(2) violates unique constraint "primary"
SQLSTATE: 23505
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example20;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example21;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example21()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT err2; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); IF i > 0 THEN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'IF END'; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example21();
  err1
--------
    -1
(1 row)
  ?column?
------------
  IF END
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(2) violates unique constraint "primary"
SQLSTATE: 23505
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example21;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example22;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example22()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SET err2 = -2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); SELECT * FROM test_t1; SELECT err2; ENDHANDLER; SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example22();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example22;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example23;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example23()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SET err2 = -2; SELECT * FROM test_t1; SELECT err2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); ENDHANDLER; SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example23();
  err1
--------
    -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example23;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example24;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example24()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE EXIT HANDLER FOR NOT FOUND BEGIN DECLARE EXIT HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SET err2 = -2; SELECT * FROM test_t1; SELECT err2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); ENDHANDLER; SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example24();
  err1
--------
    -1
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example24;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example25;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example25()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 3;DECLARE EXIT HANDLER FOR NOT FOUND BEGIN DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET err1 = -1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', err1, 3.2); SELECT err1; ENDHANDLER; SET err2 = -2; SELECT * FROM test_t1; SELECT err2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', err2, 3.2); ENDHANDLER; SELECT * FROM test_t1; SELECT * FROM employees; END;
CREATE PROCEDURE
> call process_handler_example25();
  err1
--------
    -1
(1 row)
  err2
--------
    -2
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 |  -1 |   3.20
   3 | test111 |  -2 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example25;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example26;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example26()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 2;DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; SELECT err2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 122, 3.2); UPDATE employees SET age = err2 WHERE id = 3;  DELETE FROM employees WHERE id = 3; LABEL my_loop: WHILE i > 0 DO IF i = 6 THEN LEAVE my_loop; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', i+10, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; END;
CREATE PROCEDURE
> call process_handler_example26();
  err2
--------
    -2
(1 row)
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  12 |   3.20
   3 | test111 |  13 |   3.20
   4 | test111 |  14 |   3.20
   5 | test111 |  15 |   3.20
(5 rows)
    ?column?
-----------------
  procedure end
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 5
> DROP PROCEDURE process_handler_example26;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example27;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example27()
BEGIN DECLARE err1 int DEFAULT 0; DECLARE err2 int DEFAULT 0; DECLARE i INT DEFAULT 2;DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN SET err2 = -2; SELECT err2; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 122, 3.2); UPDATE employees SET age = err2 WHERE id = 3;  DELETE FROM employees WHERE id = 3; LABEL my_loop: WHILE i > 0 DO IF i = 6 THEN LEAVE my_loop; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', i+10, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; ENDHANDLER; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 111, 3.2); SELECT 'procedure end'; END;
CREATE PROCEDURE
> call process_handler_example27();
  err2
--------
    -2
(1 row)
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 111 |   3.20
   2 | test111 |  12 |   3.20
   3 | test111 |  13 |   3.20
   4 | test111 |  14 |   3.20
   5 | test111 |  15 |   3.20
(5 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 5
> DROP PROCEDURE process_handler_example27;
DROP PROCEDURE
> insert into test_t1 values(2);
INSERT 1
> insert into test_t1 values(1);
INSERT 1
> insert into test_t1 values(0);
INSERT 1
> DROP PROCEDURE IF EXISTS process_handler_example28;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example28()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER;DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example28();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 | 122 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example28;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example29;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example29()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE EXIT HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER;DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example29();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
(error encountered after some results were delivered)
ERROR: the fetch cursor has no more data.
SQLSTATE: 24000
> SELECT * FROM employees;
  id | name | age | salary
-----+------+-----+---------
(0 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 0
> DROP PROCEDURE process_handler_example29;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example31;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example31()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE cur CURSOR FOR SELECT * FROM test_t1; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER; ENDIF; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example31();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 | 122 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example31;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example32;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example32()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE cur CURSOR FOR SELECT * FROM test_t1; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; ENDIF; END;
CREATE PROCEDURE
> call process_handler_example32();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   2 | test111 | 122 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example32;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example33;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example33()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER;DECLARE cur CURSOR FOR SELECT * FROM test_t1; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 122, 3.2); ENDHANDLER; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; ENDIF; END;
CREATE PROCEDURE
> call process_handler_example33();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   3 | test111 | 122 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example33;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example34;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example34()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER; IF i > 0 THEN DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 122, 3.2); ENDHANDLER; ENDIF;DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example34();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   3 | test111 | 122 |   3.20
(1 row)
> DELETE FROM employees WHERE 1=1;
DELETE 1
> DROP PROCEDURE process_handler_example34;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example35;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example35()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION  BEGIN INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER; SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 122, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 122, 3.2); ENDHANDLER;DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example35();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 122 |   3.20
   2 | test111 | 122 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example35;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example36;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example36()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND  BEGIN DECLARE EXIT HANDLER FOR SQLEXCEPTION  BEGIN INSERT INTO employees (id, name, age, salary) VALUES (2, 'test111', 122, 3.2); ENDHANDLER; SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 122, 3.2); INSERT INTO employees (id, name, age, salary) VALUES (1, 'test111', 122, 3.2); ENDHANDLER;DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; SELECT var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example36();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
(error encountered after some results were delivered)
ERROR: duplicate key value (id)=(1) violates unique constraint "primary"
SQLSTATE: 23505
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 | 122 |   3.20
   2 | test111 | 122 |   3.20
(2 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 2
> DROP PROCEDURE process_handler_example36;
DROP PROCEDURE
> DROP PROCEDURE IF EXISTS process_handler_example37;
DROP PROCEDURE
> CREATE PROCEDURE process_handler_example37()
BEGIN DECLARE done int DEFAULT 0; DECLARE var_a int DEFAULT 1; DECLARE i int DEFAULT 1; DECLARE CONTINUE HANDLER FOR NOT FOUND BEGIN SET done = 1; INSERT INTO employees (id, name, age, salary) VALUES (3, 'test111', 122, 3.2); UPDATE employees SET age = id+3 WHERE id = 3;  DELETE FROM employees WHERE id = 3; LABEL my_loop: WHILE i > 0 DO IF i = 6 THEN LEAVE my_loop; ENDIF; INSERT INTO employees (id, name, age, salary) VALUES (i, 'test111', i+10, 3.2); SET i=i+1; ENDWHILE; SELECT * FROM employees; ENDHANDLER; DECLARE cur CURSOR FOR SELECT * FROM test_t1; OPEN cur; LABEL read_loop: WHILE var_a >= 0 DO IF done=1 THEN LEAVE read_loop; ENDIF; FETCH cur INTO var_a; select var_a; ENDWHILE read_loop; CLOSE cur; END;
CREATE PROCEDURE
> call process_handler_example37();
  var_a
---------
      2
(1 row)
  var_a
---------
      1
(1 row)
  var_a
---------
      0
(1 row)
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 |  11 |   3.20
   2 | test111 |  12 |   3.20
   3 | test111 |  13 |   3.20
   4 | test111 |  14 |   3.20
   5 | test111 |  15 |   3.20
(5 rows)
  var_a
---------
      0
(1 row)
> SELECT * FROM employees;
  id |  name   | age | salary
-----+---------+-----+---------
   1 | test111 |  11 |   3.20
   2 | test111 |  12 |   3.20
   3 | test111 |  13 |   3.20
   4 | test111 |  14 |   3.20
   5 | test111 |  15 |   3.20
(5 rows)
> DELETE FROM employees WHERE 1=1;
DELETE 5
> DROP PROCEDURE process_handler_example37;
DROP PROCEDURE
> use defaultdb;
SET
> drop database procedure_test_db cascade;
DROP DATABASE
