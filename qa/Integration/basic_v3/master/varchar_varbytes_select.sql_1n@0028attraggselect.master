> SELECT last(e2),code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1  order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT min(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT max(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT count(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT count(distinct e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT sum(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT avg(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT stddev(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> SELECT variance(e2), code1 FROM test_SELECT_col.t1 WHERE e2 NOT IN(100000) GROUP BY code1 order by k_timestamp;
ERROR: column "k_timestamp" must appear in the GROUP BY clause or be used in an aggregate function
SQLSTATE: 42803
> drop database test_SELECT_col cascade;
DROP DATABASE
> CREATE TABLE test_table_original (
    id INT PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE
> CREATE TABLE test_table_like LIKE test_table_original;
CREATE TABLE
> INSERT INTO test_table_original VALUES (1, 'Test');
INSERT 1
> DESCRIBE test_table_original;
  column_name |  data_type   | is_nullable | column_default | generation_expression |  indices  | is_hidden | is_tag
--------------+--------------+-------------+----------------+-----------------------+-----------+-----------+---------
  id          | INT4         |    false    | NULL           |                       | {primary} |   false   | false
  name        | VARCHAR(255) |    true     | NULL           |                       | {}        |   false   | false
(2 rows)
> DROP TABLE test_table_original;
DROP TABLE
> DROP TABLE test_table_like;
DROP TABLE
> CREATE TABLE src_with_constraints (
    id INT PRIMARY KEY,
    name VARCHAR(255) UNIQUE,
    age INT CHECK (age > 0)
);
CREATE TABLE
> CREATE TABLE dst_like_constraints LIKE src_with_constraints;
CREATE TABLE
> DESCRIBE dst_like_constraints;
  column_name |  data_type   | is_nullable | column_default | generation_expression |                 indices                 | is_hidden | is_tag
--------------+--------------+-------------+----------------+-----------------------+-----------------------------------------+-----------+---------
  id          | INT4         |    false    | NULL           |                       | {primary,src_with_constraints_name_key} |   false   | false
  name        | VARCHAR(255) |    true     | NULL           |                       | {src_with_constraints_name_key}         |   false   | false
  age         | INT4         |    true     | NULL           |                       | {}                                      |   false   | false
(3 rows)
> INSERT INTO src_with_constraints VALUES (1, 'Alice', 30);
INSERT 1
> CREATE TABLE src_partitioned (
    id INT PRIMARY KEY,
    value INT
) PARTITION BY RANGE (id) (
    PARTITION p1 VALUES FROM (1) TO (10)
);
CREATE TABLE
> CREATE TABLE dst_like_partitioned LIKE src_partitioned;
CREATE TABLE
> DESCRIBE dst_like_partitioned;
  column_name | data_type | is_nullable | column_default | generation_expression |  indices  | is_hidden | is_tag
--------------+-----------+-------------+----------------+-----------------------+-----------+-----------+---------
  id          | INT4      |    false    | NULL           |                       | {primary} |   false   | false
  value       | INT4      |    true     | NULL           |                       | {}        |   false   | false
(2 rows)
> SET experimental_enable_temp_tables = 'on';
SET
> CREATE TEMP TABLE temp_src (id INT);
CREATE TABLE
> CREATE TABLE dst_like_temp LIKE temp_src;
ERROR: cannot create a permanent table like a temporary table
SQLSTATE: 42P16
> DESCRIBE dst_like_temp;
ERROR: relation "dst_like_temp" does not exist
SQLSTATE: 42P01
> DROP TABLE src_with_constraints;
DROP TABLE
> DROP TABLE dst_like_constraints;
DROP TABLE
> DROP TABLE src_partitioned;
DROP TABLE
> DROP TABLE dst_like_partitioned;
DROP TABLE
> DROP TABLE temp_src;
DROP TABLE
> DROP TABLE dst_like_temp;
ERROR: relation "dst_like_temp" does not exist
SQLSTATE: 42P01
