> set cluster setting sql.stats.ts_automatic_collection.enabled = false;
SET CLUSTER SETTING
> set cluster setting sql.stats.tag_automatic_collection.enabled = false;
SET CLUSTER SETTING
> set cluster setting ts.ordered_table.enabled = true;
SET CLUSTER SETTING
> SET vectorize_row_count_threshold = 100000000;
SET
> create ts database test_ts;
CREATE TS DATABASE
> use test_ts;
SET
> create table order_table
(time timestamp not null, e1 smallint, e2 int, e3 bigint, e4 float, e5 bool, e6 varchar)
    attributes (attr1 smallint not null, attr2 int, attr3 bigint, attr4 float, attr5 bool, attr6 varchar)
primary attributes (attr1);
CREATE TABLE
> ALTER TABLE order_table INJECT STATISTICS '[
  {
    "columns": ["attr1"],
    "created_at": "2024-09-06",
    "row_count": 100000,
    "distinct_count": 100000,
    "null_count": 0,
    "sort_histogram_buckets": [
      {"row_count": 100,"unordered_row_count": 0,"ordered_entities": 100,"unordered_entities": 0,"upper_bound": "2023-12-31 17:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 18:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 19:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 20:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 21:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 22:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2023-12-31 23:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2024-01-01 00:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2024-01-01 01:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2024-01-01 02:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 10000,"unordered_entities": 0,"upper_bound": "2024-01-01 03:00:00+00:00"}
    ],
    "histo_col_type": "TIMESTAMPTZ"
  }]';
ALTER TABLE
> show sort_histogram for table order_table;
          upper_bound         | row_count | unordered_row_count | ordered_entities_count | unordered_entities_count
------------------------------+-----------+---------------------+------------------------+---------------------------
  '2023-12-31 17:00:00+00:00' |       100 |                   0 |                    100 |                        0
  '2023-12-31 18:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2023-12-31 19:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2023-12-31 20:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2023-12-31 21:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2023-12-31 22:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2023-12-31 23:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2024-01-01 00:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2024-01-01 01:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2024-01-01 02:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
  '2024-01-01 03:00:00+00:00' |  10000000 |                   0 |                  10000 |                        0
(11 rows)
> explain select * from order_table;
      tree     |    field    |  description
---------------+-------------+-----------------
               | distributed | true
               | vectorized  | false
  synchronizer |             |
   └── ts scan |             |
               | ts-table    | order_table
               | access mode | tableTableMeta
(6 rows)
> explain select * from order_table where attr1 = 1;
      tree     |     field      |  description
---------------+----------------+----------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | order_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | ptag filter[0] | attr1 = 1
(8 rows)
> explain (opt,verbose) select * from order_table where attr1 = 1;
                                                   text
----------------------------------------------------------------------------------------------------------
  t-s-scan
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1, distinct(8)=1, null(8)=0, filteredRowCount=1000.001, disorderRowCount=0]
   ├── cost: 0.034
   ├── fd: ()-->(8)
   └── prune: (1-7,9-13)
(6 rows)
> explain select * from order_table where attr1 in (1,2,3,4,5,6,7,8,9,10);
      tree     |     field      |               description
---------------+----------------+-------------------------------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | order_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(8 rows)
> explain (opt,verbose) select * from order_table where attr1 in (1,2,3,4,5,6,7,8,9,10);
                                                   text
----------------------------------------------------------------------------------------------------------
  t-s-scan
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=10, distinct(8)=10, null(8)=0, filteredRowCount=10000.01, disorderRowCount=0]
   ├── cost: 0.034
   └── prune: (1-7,9-13)
(5 rows)
> explain select * from order_table where attr1 > 500;
      tree     |     field     |  description
---------------+---------------+-----------------
               | distributed   | true
               | vectorized    | false
  synchronizer |               |
   └── ts scan |               |
               | ts-table      | order_table
               | access mode   | tableTableMeta
               | tag filter[0] | attr1 > 500
(7 rows)
> explain select * from order_table where attr1 > 500 and attr1 < 1000;
      tree     |     field     |  description
---------------+---------------+-----------------
               | distributed   | true
               | vectorized    | false
  synchronizer |               |
   └── ts scan |               |
               | ts-table      | order_table
               | access mode   | tableTableMeta
               | tag filter[0] | attr1 > 500
               | tag filter[1] | attr1 < 1000
(8 rows)
> explain select attr2 from test_ts.order_table where attr1 < 2000 group by attr2 having attr2 < 3000000;
           tree          |     field     |   description
-------------------------+---------------+------------------
                         | distributed   | true
                         | vectorized    | false
  distinct               |               |
   │                     | distinct on   | attr2
   └── render            |               |
        │                | engine type   | time series
        │                | attr2         | attr2
        └── synchronizer |               |
             └── ts scan |               |
                         | ts-table      | order_table
                         | access mode   | tableTableMeta
                         | tag filter[0] | attr2 < 3000000
                         | tag filter[1] | attr1 < 2000
(13 rows)
> explain select e1 from test_ts.order_table order by e1;
        tree        |    field    | description
--------------------+-------------+--------------
                    | distributed | true
                    | vectorized  | false
  sort              |             |
   │                | order       | +e1
   └── synchronizer |             |
        └── ts scan |             |
                    | ts-table    | order_table
                    | access mode | metaTable
(8 rows)
> explain select e1 from test_ts.order_table order by time;
           tree          |    field    | description
-------------------------+-------------+--------------
                         | distributed | true
                         | vectorized  | false
  render                 |             |
   │                     | e1          | e1
   └── sort              |             |
        │                | order       | +"time"
        └── synchronizer |             |
             └── ts scan |             |
                         | ts-table    | order_table
                         | access mode | metaTable
(10 rows)
> explain select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 18:00:00+00:00' and time <= '2024-01-01 03:00:00+00:00';
      tree     |     field      |               description
---------------+----------------+-------------------------------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | order_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | spans:fromTime | 2023-12-31 18:00:00 +0000 UTC
               | spans:toTime   | 2024-01-01 03:00:00 +0000 UTC
               | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(10 rows)
> explain (opt,verbose) select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 18:00:00+00:00' and time <= '2024-01-01 03:00:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1000.044
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=1000.00001, disorderRowCount=0]
   │    │   histogram(8)=
   │    ├── cost: 0.034
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2023-12-31 18:00:00+00:00') AND (time:1 <= '2024-01-01 03:00:00+00:00') [outer=(1), constraints=(/1: [/'2023-12-31 18:00:00+00:00' - /'2024-01-01 03:00:00+00:00']; tight)]
(14 rows)
> explain select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 20:30:00+00:00' and time <= '2024-01-01 00:30:00+00:00';
      tree     |     field      |               description
---------------+----------------+-------------------------------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | order_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | spans:fromTime | 2023-12-31 20:30:00 +0000 UTC
               | spans:toTime   | 2024-01-01 00:30:00 +0000 UTC
               | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(10 rows)
> explain (opt,verbose) select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 20:30:00+00:00' and time <= '2024-01-01 00:30:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1000.044
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=444.444444, disorderRowCount=0]
   │    │   histogram(8)=
   │    ├── cost: 0.034
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2023-12-31 20:30:00+00:00') AND (time:1 <= '2024-01-01 00:30:00+00:00') [outer=(1), constraints=(/1: [/'2023-12-31 20:30:00+00:00' - /'2024-01-01 00:30:00+00:00']; tight)]
(14 rows)
> explain select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2025-01-01 00:30:00+00:00' and time <= '2025-12-31 20:30:00+00:00';
      tree     |     field      |               description
---------------+----------------+-------------------------------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | order_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | spans:fromTime | 2025-01-01 00:30:00 +0000 UTC
               | spans:toTime   | 2025-12-31 20:30:00 +0000 UTC
               | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(10 rows)
> explain (opt,verbose) select * from test_ts.order_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2025-01-01 00:30:00+00:00' and time <= '2025-12-31 20:30:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1000.044
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=0, disorderRowCount=0]
   │    │   histogram(8)=
   │    ├── cost: 0.034
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2025-01-01 00:30:00+00:00') AND (time:1 <= '2025-12-31 20:30:00+00:00') [outer=(1), constraints=(/1: [/'2025-01-01 00:30:00+00:00' - /'2025-12-31 20:30:00+00:00']; tight)]
(14 rows)
> create table unordered_table
(time timestamp not null, e1 smallint, e2 int, e3 bigint, e4 float, e5 bool, e6 varchar)
    attributes (attr1 smallint not null, attr2 int, attr3 bigint, attr4 float, attr5 bool, attr6 varchar)
primary attributes (attr1);
CREATE TABLE
> ALTER TABLE unordered_table INJECT STATISTICS '[
  {
    "columns": ["attr1"],
    "created_at": "2024-09-06",
    "row_count": 100000,
    "distinct_count": 100000,
    "null_count": 0,
    "sort_histogram_buckets": [
      {"row_count": 100,"unordered_row_count": 0,"ordered_entities": 100,"unordered_entities": 0,"upper_bound": "2023-12-31 17:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 18:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 19:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 20:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 21:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 22:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 23:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2024-01-01 00:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2024-01-01 01:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2024-01-01 02:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2024-01-01 03:00:00+00:00"}
    ],
    "histo_col_type": "TIMESTAMPTZ"
  }]';
ALTER TABLE
> show sort_histogram for table unordered_table;
          upper_bound         | row_count | unordered_row_count | ordered_entities_count | unordered_entities_count
------------------------------+-----------+---------------------+------------------------+---------------------------
  '2023-12-31 17:00:00+00:00' |       100 |                   0 |                    100 |                        0
  '2023-12-31 18:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2023-12-31 19:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2023-12-31 20:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2023-12-31 21:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2023-12-31 22:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2023-12-31 23:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2024-01-01 00:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2024-01-01 01:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2024-01-01 02:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
  '2024-01-01 03:00:00+00:00' |  10000000 |            10000000 |                      0 |                    10000
(11 rows)
> explain select * from unordered_table;
      tree     |    field    |   description
---------------+-------------+------------------
               | distributed | true
               | vectorized  | false
  synchronizer |             |
   └── ts scan |             |
               | ts-table    | unordered_table
               | access mode | tableTableMeta
(6 rows)
> explain select * from unordered_table where attr1 = 1;
   tree   |     field      |   description
----------+----------------+------------------
          | distributed    | true
          | vectorized     | false
  ts scan |                |
          | ts-table       | unordered_table
          | ordered type   | sort after scan
          | access mode    | tagIndexTable
          | ptag filter[0] | attr1 = 1
(7 rows)
> explain (opt,verbose) select * from unordered_table where attr1 = 1;
                                                   text
----------------------------------------------------------------------------------------------------------
  t-s-scan
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1, distinct(8)=1, null(8)=0, filteredRowCount=1000.001, disorderRowCount=999.000999]
   ├── cost: 69.1116319
   ├── fd: ()-->(8)
   └── prune: (1-7,9-13)
(6 rows)
> explain select * from unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10);
   tree   |     field      |               description
----------+----------------+-------------------------------------------
          | distributed    | true
          | vectorized     | false
  ts scan |                |
          | ts-table       | unordered_table
          | ordered type   | sort after scan
          | access mode    | tagIndexTable
          | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(7 rows)
> explain (opt,verbose) select * from unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10);
                                                    text
------------------------------------------------------------------------------------------------------------
  t-s-scan
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=10, distinct(8)=10, null(8)=0, filteredRowCount=10000.01, disorderRowCount=9990.00999]
   ├── cost: 921.069058
   └── prune: (1-7,9-13)
(5 rows)
> explain select * from unordered_table where attr1 > 500;
   tree   |     field     |   description
----------+---------------+------------------
          | distributed   | true
          | vectorized    | false
  ts scan |               |
          | ts-table      | unordered_table
          | access mode   | tableTableMeta
          | tag filter[0] | attr1 > 500
(6 rows)
> explain select * from unordered_table where attr1 > 500 and attr1 < 1000;
   tree   |     field     |   description
----------+---------------+------------------
          | distributed   | true
          | vectorized    | false
  ts scan |               |
          | ts-table      | unordered_table
          | access mode   | tableTableMeta
          | tag filter[0] | attr1 > 500
          | tag filter[1] | attr1 < 1000
(7 rows)
> explain select attr2 from test_ts.order_table where attr1 < 2000 group by attr2 having attr2 < 3000000;
           tree          |     field     |   description
-------------------------+---------------+------------------
                         | distributed   | true
                         | vectorized    | false
  distinct               |               |
   │                     | distinct on   | attr2
   └── render            |               |
        │                | engine type   | time series
        │                | attr2         | attr2
        └── synchronizer |               |
             └── ts scan |               |
                         | ts-table      | order_table
                         | access mode   | tableTableMeta
                         | tag filter[0] | attr2 < 3000000
                         | tag filter[1] | attr1 < 2000
(13 rows)
> explain select e1 from test_ts.unordered_table order by e1;
        tree        |    field    |   description
--------------------+-------------+------------------
                    | distributed | true
                    | vectorized  | false
  sort              |             |
   │                | order       | +e1
   └── synchronizer |             |
        └── ts scan |             |
                    | ts-table    | unordered_table
                    | access mode | metaTable
(8 rows)
> explain select e1 from test_ts.unordered_table order by time;
           tree          |    field    |   description
-------------------------+-------------+------------------
                         | distributed | true
                         | vectorized  | false
  render                 |             |
   │                     | e1          | e1
   └── sort              |             |
        │                | order       | +"time"
        └── synchronizer |             |
             └── ts scan |             |
                         | ts-table    | unordered_table
                         | access mode | metaTable
(10 rows)
> explain select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 18:00:00+00:00' and time <= '2024-01-01 03:00:00+00:00';
   tree   |     field      |               description
----------+----------------+-------------------------------------------
          | distributed    | true
          | vectorized     | false
  ts scan |                |
          | ts-table       | unordered_table
          | ordered type   | sort after scan
          | access mode    | tagIndexTable
          | spans:fromTime | 2023-12-31 18:00:00 +0000 UTC
          | spans:toTime   | 2024-01-01 03:00:00 +0000 UTC
          | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(9 rows)
> explain (opt,verbose) select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 18:00:00+00:00' and time <= '2024-01-01 03:00:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1069.12155
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=1000.00001, disorderRowCount=1000]
   │    │   histogram(8)=
   │    ├── cost: 69.1115537
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2023-12-31 18:00:00+00:00') AND (time:1 <= '2024-01-01 03:00:00+00:00') [outer=(1), constraints=(/1: [/'2023-12-31 18:00:00+00:00' - /'2024-01-01 03:00:00+00:00']; tight)]
(14 rows)
> explain select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 20:30:00+00:00' and time <= '2024-01-01 00:30:00+00:00';
   tree   |     field      |               description
----------+----------------+-------------------------------------------
          | distributed    | true
          | vectorized     | false
  ts scan |                |
          | ts-table       | unordered_table
          | ordered type   | sort after scan
          | access mode    | tagIndexTable
          | spans:fromTime | 2023-12-31 20:30:00 +0000 UTC
          | spans:toTime   | 2024-01-01 00:30:00 +0000 UTC
          | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(9 rows)
> explain (opt,verbose) select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2023-12-31 20:30:00+00:00' and time <= '2024-01-01 00:30:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1027.141
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=444.444444, disorderRowCount=444.444444]
   │    │   histogram(8)=
   │    ├── cost: 27.1310003
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2023-12-31 20:30:00+00:00') AND (time:1 <= '2024-01-01 00:30:00+00:00') [outer=(1), constraints=(/1: [/'2023-12-31 20:30:00+00:00' - /'2024-01-01 00:30:00+00:00']; tight)]
(14 rows)
> explain select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2025-01-01 00:30:00+00:00' and time <= '2025-12-31 20:30:00+00:00';
      tree     |     field      |               description
---------------+----------------+-------------------------------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | unordered_table
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | spans:fromTime | 2025-01-01 00:30:00 +0000 UTC
               | spans:toTime   | 2025-12-31 20:30:00 +0000 UTC
               | ptag filter[0] | attr1 IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
(10 rows)
> explain (opt,verbose) select * from test_ts.unordered_table where attr1 in (1,2,3,4,5,6,7,8,9,10) and time >= '2025-01-01 00:30:00+00:00' and time <= '2025-12-31 20:30:00+00:00';
                                                                                                text
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  select
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=1.11111111, distinct(1)=1.11111111, null(1)=0, distinct(8)=1.11111111, null(8)=0]
   ├── cost: 1000.044
   ├── prune: (2-7,9-13)
   ├── t-s-scan
   │    ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   │    ├── stats: [rows=100000, distinct(1)=100000, null(1)=0, distinct(8)=100000, null(8)=0, filteredRowCount=0, disorderRowCount=0]
   │    │   histogram(8)=
   │    ├── cost: 0.034
   │    ├── key: (1)
   │    └── fd: (1)-->(2-13)
   └── filters
        └── (time:1 >= '2025-01-01 00:30:00+00:00') AND (time:1 <= '2025-12-31 20:30:00+00:00') [outer=(1), constraints=(/1: [/'2025-01-01 00:30:00+00:00' - /'2025-12-31 20:30:00+00:00']; tight)]
(14 rows)
> create table unordered_table2
(time timestamp not null, e1 smallint, e2 int, e3 bigint, e4 float, e5 bool, e6 varchar)
    attributes (attr1 smallint not null, attr2 int not null, attr3 bigint not null, attr4 float, attr5 bool, attr6 varchar)
primary attributes (attr1,attr2,attr3);
CREATE TABLE
> ALTER TABLE unordered_table2 INJECT STATISTICS '[
  {
    "columns": ["attr1","attr2","attr3"],
    "created_at": "2024-09-06",
    "row_count": 100000,
    "distinct_count": 100000,
    "null_count": 0,
    "sort_histogram_buckets": [
      {"row_count": 100,"unordered_row_count": 0,"ordered_entities": 100,"unordered_entities": 0,"upper_bound": "2023-12-31 17:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 5000000,"ordered_entities": 5000,"unordered_entities": 5000,"upper_bound": "2023-12-31 18:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 5000000,"ordered_entities": 1000,"unordered_entities": 9000,"upper_bound": "2023-12-31 19:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 2000000,"ordered_entities": 2000,"unordered_entities": 8000,"upper_bound": "2023-12-31 20:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 0,"ordered_entities": 0,"unordered_entities": 10000,"upper_bound": "2023-12-31 21:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 3000000,"ordered_entities": 5000,"unordered_entities": 5000,"upper_bound": "2023-12-31 22:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 6000000,"ordered_entities": 6000,"unordered_entities": 4000,"upper_bound": "2023-12-31 23:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 7000000,"ordered_entities": 1000,"unordered_entities": 9000,"upper_bound": "2024-01-01 00:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 8000000,"ordered_entities": 1,"unordered_entities": 1,"upper_bound": "2024-01-01 01:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 9000000,"ordered_entities": 1,"unordered_entities": 1,"upper_bound": "2024-01-01 02:00:00+00:00"},
      {"row_count": 10000000,"unordered_row_count": 10000000,"ordered_entities": 0,"unordered_entities": 1,"upper_bound": "2024-01-01 03:00:00+00:00"}
    ],
    "histo_col_type": "TIMESTAMPTZ"
  }]';
ALTER TABLE
> show sort_histogram for table unordered_table2;
          upper_bound         | row_count | unordered_row_count | ordered_entities_count | unordered_entities_count
------------------------------+-----------+---------------------+------------------------+---------------------------
  '2023-12-31 17:00:00+00:00' |       100 |                   0 |                    100 |                        0
  '2023-12-31 18:00:00+00:00' |  10000000 |             5000000 |                   5000 |                     5000
  '2023-12-31 19:00:00+00:00' |  10000000 |             5000000 |                   1000 |                     9000
  '2023-12-31 20:00:00+00:00' |  10000000 |             2000000 |                   2000 |                     8000
  '2023-12-31 21:00:00+00:00' |  10000000 |                   0 |                      0 |                    10000
  '2023-12-31 22:00:00+00:00' |  10000000 |             3000000 |                   5000 |                     5000
  '2023-12-31 23:00:00+00:00' |  10000000 |             6000000 |                   6000 |                     4000
  '2024-01-01 00:00:00+00:00' |  10000000 |             7000000 |                   1000 |                     9000
  '2024-01-01 01:00:00+00:00' |  10000000 |             8000000 |                      1 |                        1
  '2024-01-01 02:00:00+00:00' |  10000000 |             9000000 |                      1 |                        1
  '2024-01-01 03:00:00+00:00' |  10000000 |            10000000 |                      0 |                        1
(11 rows)
> explain select * from unordered_table2 where attr1 = 1 and attr2 = 2 and attr3 = 3;
      tree     |     field      |   description
---------------+----------------+-------------------
               | distributed    | true
               | vectorized     | false
  synchronizer |                |
   └── ts scan |                |
               | ts-table       | unordered_table2
               | ordered type   | order scan
               | access mode    | tagIndexTable
               | ptag filter[0] | attr1 = 1
               | ptag filter[1] | attr2 = 2
               | ptag filter[2] | attr3 = 3
(10 rows)
> explain (opt,verbose) select * from unordered_table2 where attr1 = 1 and attr2 = 2 and attr3 = 3;
                                                                               text
------------------------------------------------------------------------------------------------------------------------------------------------------------------
  t-s-scan
   ├── columns: time:1 e1:2 e2:3 e3:4 e4:5 e5:6 e6:7 attr1:8 attr2:9 attr3:10 attr4:11 attr5:12 attr6:13
   ├── stats: [rows=100, distinct(8)=1, null(8)=0, distinct(9)=1, null(9)=0, distinct(10)=1, null(10)=0, filteredRowCount=100000.1, disorderRowCount=39229.2276]
   ├── cost: 4267.54666
   ├── fd: ()-->(8-10)
   └── prune: (1-7,11-13)
(6 rows)
> drop database test_ts cascade;
DROP DATABASE
> reset cluster setting sql.stats.ts_automatic_collection.enabled;
SET CLUSTER SETTING
> reset cluster setting sql.stats.tag_automatic_collection.enabled;
SET CLUSTER SETTING
> reset cluster setting ts.ordered_table.enabled;
SET CLUSTER SETTING
> SET vectorize_row_count_threshold = 1000;
SET