> CREATE FUNCTION calculate_distance(x1 double, y1 double, x2 double, y2 double)
    RETURNS double
    LANGUAGE LUA
BEGIN
'function calculate_distance(x1, y1, x2, y2)
    local dx = x2 - x1
    local dy = y2 - y1
    return math.sqrt(dx * dx + dy * dy)
end'
END;
CREATE FUNCTION
> CREATE FUNCTION calculate_factorial(n double)
    RETURNS double
    LANGUAGE LUA
BEGIN
'function calculate_factorial(n)
    local result = 1
    n = math.floor(n)
    if n < 0 or n > math.huge then
        return nil
    end
    for i = 2, n do
        result = result * i
        if result > math.huge then
            return result
        end
    end
    return result
end'
END;
CREATE FUNCTION
> SELECT function_name,argument_types,return_type,types_length,function_body,function_type,language,db_name,creator,comments FROM system.user_defined_function;
     function_name    | argument_types | return_type | types_length |                function_body                | function_type | language |  db_name  | creator | comments
----------------------+----------------+-------------+--------------+---------------------------------------------+---------------+----------+-----------+---------+-----------
  calculate_distance  | {5,5,5,5}      | {5}         | {0,0,0,0,0}  | function calculate_distance(x1, y1, x2, y2) |             1 | LUA      | defaultdb | root    |
                      |                |             |              |     local dx = x2 - x1                      |               |          |           |         |
                      |                |             |              |     local dy = y2 - y1                      |               |          |           |         |
                      |                |             |              |     return math.sqrt(dx * dx + dy * dy)     |               |          |           |         |
                      |                |             |              | end                                         |               |          |           |         |
  calculate_factorial | {5}            | {5}         | {0,0}        | function calculate_factorial(n)             |             1 | LUA      | defaultdb | root    |
                      |                |             |              |     local result = 1                        |               |          |           |         |
                      |                |             |              |     n = math.floor(n)                       |               |          |           |         |
                      |                |             |              |     if n < 0 or n > math.huge then          |               |          |           |         |
                      |                |             |              |         return nil                          |               |          |           |         |
                      |                |             |              |     end                                     |               |          |           |         |
                      |                |             |              |     for i = 2, n do                         |               |          |           |         |
                      |                |             |              |         result = result * i                 |               |          |           |         |
                      |                |             |              |         if result > math.huge then          |               |          |           |         |
                      |                |             |              |             return result                   |               |          |           |         |
                      |                |             |              |         end                                 |               |          |           |         |
                      |                |             |              |     end                                     |               |          |           |         |
                      |                |             |              |     return result                           |               |          |           |         |
                      |                |             |              | end                                         |               |          |           |         |
(2 rows)
> SHOW FUNCTIONS;
     function_name
-----------------------
  calculate_distance
  calculate_factorial
(2 rows)
> SHOW FUNCTION calculate_distance;
    function_name    |         argument_types         | return_type | function_type | language
---------------------+--------------------------------+-------------+---------------+-----------
  calculate_distance | DOUBLE, DOUBLE, DOUBLE, DOUBLE | DOUBLE      | function      | LUA
(1 row)
> SHOW FUNCTION calculate_factorial;
     function_name    | argument_types | return_type | function_type | language
----------------------+----------------+-------------+---------------+-----------
  calculate_factorial | DOUBLE         | DOUBLE      | function      | LUA
(1 row)
> SELECT calculate_distance(0, 0, 1, 1);
  calculate_distance
----------------------
  1.4142135623730951
(1 row)
> SELECT calculate_factorial(5);
  calculate_factorial
-----------------------
                  120
(1 row)
> SELECT calculate_factorial(5.7);
  calculate_factorial
-----------------------
                  120
(1 row)
> CREATE TS DATABASE test_udf;
CREATE TS DATABASE
> CREATE TABLE test_udf.tb1(ts timestamptz NOT NULL, e1 double,e2 double,e3 double, e4 double) TAGS(t1 int NOT NULL) PRIMARY TAGS(t1);
CREATE TABLE
> INSERT INTO test_udf.tb1 VALUES(NOW(), 0, 0, 1, 1, 1);
INSERT 1
> INSERT INTO test_udf.tb1 VALUES(NOW(), 5, 5, 5, 5, 2);
INSERT 1
> SELECT calculate_distance(e1, e2, e3, e4) FROM test_udf.tb1 order by e1;
  calculate_distance
----------------------
  1.4142135623730951
                   0
(2 rows)
> SELECT calculate_factorial(e1) FROM test_udf.tb1 order by e1;
  calculate_factorial
-----------------------
                    1
                  120
(2 rows)
> drop table test_udf.tb1;
DROP TABLE
> drop database test_udf cascade;
DROP DATABASE
> CREATE DATABASE test_udf_re;
CREATE DATABASE
> CREATE TABLE test_udf_re.r1(x1 double, y1 double, x2 double, y2 double);
CREATE TABLE
> INSERT INTO test_udf_re.r1 VALUES(0, 0, 1, 1);
INSERT 1
> SELECT calculate_distance(x1, y1, x2, y2) FROM test_udf_re.r1;
  calculate_distance
----------------------
  1.4142135623730951
(1 row)
> SELECT calculate_factorial(x1) FROM test_udf_re.r1;
  calculate_factorial
-----------------------
                    1
(1 row)
> drop table test_udf_re.r1;
DROP TABLE
> drop database test_udf_re cascade;
DROP DATABASE
> SELECT calculate_factorial(1.79769313486231570814527423731704356798071e+308);
  calculate_factorial
-----------------------
  +Inf
(1 row)
> SELECT calculate_factorial(1.79769313486231570814527423731704356798071e+309);
  calculate_factorial
-----------------------
  NULL
(1 row)
> SELECT calculate_factorial(170);
   calculate_factorial
--------------------------
  7.257415615307994e+306
(1 row)
> SELECT calculate_factorial(171);
  calculate_factorial
-----------------------
  +Inf
(1 row)
> SELECT calculate_factorial(null);
  calculate_factorial
-----------------------
  NULL
(1 row)
> SELECT calculate_factorial(null);
  calculate_factorial
-----------------------
  NULL
(1 row)
> SELECT calculate_factorial(null);
  calculate_factorial
-----------------------
  NULL
(1 row)
> SELECT calculate_factorial(null);
  calculate_factorial
-----------------------
  NULL
(1 row)
> SELECT calculate_factorial(-1);
  calculate_factorial
-----------------------
  NULL
(1 row)
> DROP FUNCTION calculate_distance;
DROP FUNCTION
> DROP FUNCTION calculate_factorial;
DROP FUNCTION
> SHOW FUNCTIONS;
  function_name
-----------------
(0 rows)
