> drop database if exists benchmark_ut cascade;
DROP DATABASE
> create ts database benchmark_ut;
CREATE TS DATABASE
> create table benchmark_ut.cpu
(
    k_timestamp      timestamp not null,
    usage_user       bigint    not null,
    usage_system     bigint    not null,
    usage_idle       bigint    not null,
    usage_nice       bigint    not null,
    usage_iowait     bigint    not null,
    usage_irq        bigint    not null,
    usage_softirq    bigint    not null,
    usage_steal      bigint,
    usage_guest      bigint,
    usage_guest_nice bigint
) attributes (
    hostname char(30) not null,
    region char(30),
    datacenter char(30),
    rack char(30),
    os char(30),
    arch char(30),
    team char(30),
    service char(30),
    service_version char(30),
    service_environment char(30)
    )
primary attributes (hostname);
CREATE TABLE
> explain SELECT time_bucket(k_timestamp, '2s') as k_timestamp_b,
               hostname,
               max(usage_user)
        FROM benchmark_ut.cpu
        WHERE hostname = 'host_4'
        GROUP BY hostname, k_timestamp_b
        ORDER BY hostname, k_timestamp_b;
             tree             |        field        |          description
------------------------------+---------------------+---------------------------------
                              | distributed         | true
                              | vectorized          | false
  render                      |                     |
   │                          | k_timestamp_b       | k_timestamp_b
   │                          | hostname            | any_not_null
   │                          | max                 | max
   └── sort                   |                     |
        │                     | order               | +k_timestamp_b
        └── group             |                     |
             │                | engine type         | time series
             │                | aggregate 0         | k_timestamp_b
             │                | aggregate 1         | max(usage_user)
             │                | aggregate 2         | any_not_null(hostname)
             │                | group by            | k_timestamp_b
             │                | pushLocalAggToScan  | true
             │                | addSynchronizer     | true
             │                | pruneLocalAgg       | true
             │                | pruneFinalAgg       | true
             └── render       |                     |
                  │           | engine type         | time series
                  │           | k_timestamp_b       | time_bucket(k_timestamp, '2s')
                  │           | usage_user          | usage_user
                  │           | hostname            | hostname
                  └── ts scan |                     |
                              | ts-table            | cpu
                              | ordered type        | order scan
                              | access mode         | tagIndex
                              | ptag filter[0]      | hostname = 'host_4'
(28 rows)
> explain SELECT
               hostname,
               max(usage_user)
        FROM benchmark_ut.cpu
        WHERE hostname = 'host_4'
        GROUP BY hostname
        ORDER BY hostname;
        tree        |        field        |      description
--------------------+---------------------+-------------------------
                    | distributed         | true
                    | vectorized          | false
  render            |                     |
   │                | engine type         | time series
   │                | hostname            | any_not_null
   │                | max                 | max
   └── group        |                     |
        │           | engine type         | time series
        │           | aggregate 0         | max(usage_user)
        │           | aggregate 1         | any_not_null(hostname)
        │           | pushLocalAggToScan  | true
        │           | addSynchronizer     | true
        │           | pruneFinalAgg       | true
        └── ts scan |                     |
                    | ts-table            | cpu
                    | access mode         | tagIndex
                    | use statistic       | true
                    | ptag filter[0]      | hostname = 'host_4'
(18 rows)
> explain SELECT time_bucket(k_timestamp, '2s') as k_timestamp_b,
               hostname,usage_nice,
               max(usage_user)
        FROM benchmark_ut.cpu
        WHERE hostname = 'host_4'
        GROUP BY hostname, k_timestamp_b,usage_nice
        ORDER BY hostname, k_timestamp_b;
             tree             |      field       |          description
------------------------------+------------------+---------------------------------
                              | distributed      | true
                              | vectorized       | false
  render                      |                  |
   │                          | k_timestamp_b    | k_timestamp_b
   │                          | hostname         | any_not_null
   │                          | usage_nice       | usage_nice
   │                          | max              | max
   └── sort                   |                  |
        │                     | order            | +k_timestamp_b
        └── group             |                  |
             │                | engine type      | time series
             │                | aggregate 0      | usage_nice
             │                | aggregate 1      | k_timestamp_b
             │                | aggregate 2      | max(usage_user)
             │                | aggregate 3      | any_not_null(hostname)
             │                | group by         | usage_nice, k_timestamp_b
             │                | addSynchronizer  | true
             └── render       |                  |
                  │           | engine type      | time series
                  │           | k_timestamp_b    | time_bucket(k_timestamp, '2s')
                  │           | usage_user       | usage_user
                  │           | usage_nice       | usage_nice
                  │           | hostname         | hostname
                  └── ts scan |                  |
                              | ts-table         | cpu
                              | access mode      | tagIndex
                              | ptag filter[0]   | hostname = 'host_4'
(27 rows)
> explain SELECT time_bucket(k_timestamp, '2s') as k_timestamp_b,
               hostname,
               max(usage_user)
        FROM benchmark_ut.cpu
        WHERE hostname = 'host_4'
        GROUP BY hostname,k_timestamp
        ORDER BY hostname, k_timestamp_b;
           tree          |      field       |          description
-------------------------+------------------+---------------------------------
                         | distributed      | true
                         | vectorized       | false
  sort                   |                  |
   │                     | order            | +k_timestamp_b
   └── render            |                  |
        │                | engine type      | time series
        │                | k_timestamp_b    | time_bucket(k_timestamp, '2s')
        │                | hostname         | any_not_null
        │                | max              | max
        └── group        |                  |
             │           | engine type      | time series
             │           | aggregate 0      | k_timestamp
             │           | aggregate 1      | max(usage_user)
             │           | aggregate 2      | any_not_null(hostname)
             │           | group by         | k_timestamp
             │           | addSynchronizer  | true
             └── ts scan |                  |
                         | ts-table         | cpu
                         | access mode      | tagIndex
                         | ptag filter[0]   | hostname = 'host_4'
(20 rows)
> explain SELECT time_bucket(k_timestamp, '2s') as k_timestamp_b,
       hostname,
       max(usage_user)
FROM benchmark_ut.cpu
WHERE hostname = 'host_4'
  AND k_timestamp >= '2023-01-01 00:00:00'
  AND k_timestamp < '2024-01-01 00:00:00'
  and usage_nice>2000
GROUP BY hostname, k_timestamp_b
ORDER BY hostname, k_timestamp_b;
             tree             |      field       |            description
------------------------------+------------------+------------------------------------
                              | distributed      | true
                              | vectorized       | false
  render                      |                  |
   │                          | k_timestamp_b    | k_timestamp_b
   │                          | hostname         | any_not_null
   │                          | max              | max
   └── sort                   |                  |
        │                     | order            | +k_timestamp_b
        └── group             |                  |
             │                | engine type      | time series
             │                | aggregate 0      | k_timestamp_b
             │                | aggregate 1      | max(usage_user)
             │                | aggregate 2      | any_not_null(hostname)
             │                | group by         | k_timestamp_b
             │                | addSynchronizer  | true
             └── render       |                  |
                  │           | engine type      | time series
                  │           | k_timestamp_b    | time_bucket(k_timestamp, '2s')
                  │           | usage_user       | usage_user
                  │           | hostname         | hostname
                  └── ts scan |                  |
                              | ts-table         | cpu
                              | access mode      | tagIndex
                              | spans:fromTime   | 2023-01-01 00:00:00 +0000 UTC
                              | spans:toTime     | 2023-12-31 23:59:59.999 +0000 UTC
                              | filter           | usage_nice > 2000
                              | ptag filter[0]   | hostname = 'host_4'
(27 rows)
> explain select first_row(usage_user),first_row(usage_user),first_row(usage_user),first_row(usage_user)
from benchmark_ut.cpu
group by usage_idle having usage_idle > 20;
           tree          |      field       |            description
-------------------------+------------------+-------------------------------------
                         | distributed      | true
                         | vectorized       | false
  render                 |                  |
   │                     | engine type      | time series
   │                     | first_row        | first_row
   │                     | first_row        | first_row
   │                     | first_row        | first_row
   │                     | first_row        | first_row
   └── render            |                  |
        │                | engine type      | time series
        │                | first_row        | first_row
        └── group        |                  |
             │           | engine type      | time series
             │           | aggregate 0      | usage_idle
             │           | aggregate 1      | first_row(usage_user, k_timestamp)
             │           | group by         | usage_idle
             │           | addSynchronizer  | true
             └── ts scan |                  |
                         | ts-table         | cpu
                         | access mode      | metaTable
                         | filter           | usage_idle > 20
(21 rows)
> explain select count(usage_user),hostname from benchmark_ut.cpu
where hostname='host_0' and k_timestamp >='2023-01-01 00:00:00' and k_timestamp<'2024-10-01 00:00:00'
group by hostname;
        tree        |        field        |            description
--------------------+---------------------+------------------------------------
                    | distributed         | true
                    | vectorized          | false
  group             |                     |
   │                | engine type         | time series
   │                | aggregate 0         | count(usage_user)
   │                | aggregate 1         | any_not_null(hostname)
   │                | pushLocalAggToScan  | true
   │                | addSynchronizer     | true
   │                | pruneFinalAgg       | true
   └── render       |                     |
        │           | engine type         | time series
        │           | usage_user          | usage_user
        │           | hostname            | hostname
        └── ts scan |                     |
                    | ts-table            | cpu
                    | access mode         | tagIndex
                    | use statistic       | true
                    | spans:fromTime      | 2023-01-01 00:00:00 +0000 UTC
                    | spans:toTime        | 2024-09-30 23:59:59.999 +0000 UTC
                    | ptag filter[0]      | hostname = 'host_0'
(20 rows)
> drop database benchmark_ut cascade;
DROP DATABASE
