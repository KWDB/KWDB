# LogicTest: 5node-vec 5node-vec-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
eJzUll1ro0wUx--fTzGcq_RhsmbU9GWuGrpZCKSmGy37UqRYPWSl1nFnxtJS8t0XtbCxbEZLYBfv4sz8c86P3xz0BdTPDDj48-X8IiClzMin9eqS3My_Xi1nC4_MvNny2_c5GX1c-IH_eXlEXo_Gosz16P-j5vz9YwgUcpGgFz2gAn4DDCjYQMEBCi5QmEJIoZAiRqWErI681IFF8gR8QiHNi1JXyyGFWEgE_gI61RkChyC6y3CNUYLSmgCFBHWUZnWZ-8fzQqYPkXwGCn4R5YqTsVUVXpWaE0_k2PwuSh08F6g4SXPt7lm7i3T8AxUR9R4nFYQui-zNksIMY50-pvqZk8mHSdWT0lGWEZ0-ICcTBeGWQhN5ZVI62iBwtqX9uWebjcRNpIW0pm3si9W1F9yuV1_80dEfWA5DwSeMS52KvBvH3ovzm6LMhUxQYtJCCLdmYPZGtH99ebvwgtE5-6fAznv8eWIsCouxNsnfadRtNcr6DxjrHjDLHlvOQEasg3znxh0PYcTs_iLtHiKdseUORGQH-Y7IkyGIdPqLdHqIdMf1K2IIIjvId0SeDkGk21-k20PkdDwQjR3cOxrPhqCx41W-RlWIXGEbBSjs_ftJ9YGDyQabryElShnjlRRxXat5bNjrhQSVbnZZ87DIm62qy90wM4btVpi9DdvGsGOu7Jjbts1p15iemsPTQ6CPjeETc-WTQyqfGsNn5spnh1RmHXes65K975aF2_9-BQAA__8pTK8e

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
eJzUmF1vwjYUhu_3K6xz1a6mifNBS6RKVBuTqCh0hYttFRcp8SAiTbLEoUUV_30K2dQRGp8ES2i5az6e2Oftc6wjPiH9KwAHpoPR4KcZyZKA_PI8eSQvg9-eRvfDMbkf349-_2NALn4eTmfTX0eX5J9XfyxeXG_Iw2Q4Jut3MhmT9eZ6Te7I-v16PQcKYeTxsfvGU3BegAEFAyiYQMECCjbMKcRJtOBpGiX5K597YOh9gKNT8MM4E_ntOYVFlHBwPkH4IuDgwMx9Dfgzdz2eaDpQ8Lhw_WC_zHrTjxP_zU22QGEau2HqkI6WLzzJRJyJ2TbmqUP8UFgV915dsVjxlET7Zw7JNy6yOCjdSnnAF8Lf-GLrEP1az_eRCjcIiPDfuEP0FOY7CgVSlPfv9l-3ZOWmq8ON9xnMd_P9N5YcHLajp-XRLeXxfpyHxtqYiFGZyNd3osTjCffK37nKF6711jfhPvJkyR8iP-SJxkq2BfxPcdFnV5d3ib9cFX8WITqkz2jfoH2T9hUz5B98kQk_Cqty_MrIrJFRFn5X_7elj6NOFGvMPiy6XIp9XIqtXop1UAqr3wAMPxA0o6OZrWsAdmoiNzWOhFYmYlQmcsYjgbXpSDDqW2PU6COzo1UZ8v-1hp2ayG2NPmplIkZlImfsI6NNfWTWt8as0UdWR7NbZw07NZFejT5qZSJGZSJn7COzTX1k1bfGqtFHdqd1zrBT87DxLupojLihRxiJxIonrcvGqMzmjP1ktamfkB8KnnkaR2HKD0sCCpWf1_N8uLfkRepplCUL_pREi_1axWUh0H4A93gqiqdGcTEMi0f5LuvDXRW4pwIzpX0zW06zBpEZzeCuCtxTgZnSvkuRHdFGmdb_S5vyvE0pzA4z08u0pSK4HEYEl8OI4HIYExyhEcFtFcHlMCK4HEYEl8OY4AiNCN5VEfxGRVE5jCgqhxFF5TCmKEIjit6qKCqHEUXlMKKoHMYURWhE0Z6KokxpTkBoRFKERixFaExTDMdmBbVhQW1aUBsXFOcFtYGBKU0M7GhkaGSrnMZsldOYrXIatRXBMVubDEvH_7Mm01JTGrO10bzUGMdsPRoepLbOdz_8HQAA__-uqWrn

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.noopOperator
│     └ *colexec.orderedAggregator
│       └ *colexec.oneShotOp
│         └ *colexec.distinctChainOps
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.countOp
│             │ └ *colexec.simpleProjectOp
│             │   └ *colexec.CancelChecker
│             │     └ *colexec.colBatchScan
│             ├ *colrpc.Inbox
│             ├ *colrpc.Inbox
│             ├ *colrpc.Inbox
│             └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colexec.colBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.noopOperator
│     └ *colexec.orderedAggregator
│       └ *colexec.oneShotOp
│         └ *colexec.distinctChainOps
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.countOp
│             │ └ *colexec.simpleProjectOp
│             │   └ *colexec.diskSpillerBase
│             │     ├ *colexec.hashJoiner
│             │     │ ├ *colexec.ParallelUnorderedSynchronizer
│             │     │ │ ├ *colexec.routerOutputOp
│             │     │ │ │ └ *colexec.HashRouter
│             │     │ │ │   └ *colexec.CancelChecker
│             │     │ │ │     └ *colexec.colBatchScan
│             │     │ │ ├ *colrpc.Inbox
│             │     │ │ ├ *colrpc.Inbox
│             │     │ │ ├ *colrpc.Inbox
│             │     │ │ └ *colrpc.Inbox
│             │     │ └ *colexec.ParallelUnorderedSynchronizer
│             │     │   ├ *colexec.routerOutputOp
│             │     │   │ └ *colexec.HashRouter
│             │     │   │   └ *colexec.CancelChecker
│             │     │   │     └ *colexec.colBatchScan
│             │     │   ├ *colrpc.Inbox
│             │     │   ├ *colrpc.Inbox
│             │     │   ├ *colrpc.Inbox
│             │     │   └ *colrpc.Inbox
│             │     ├ *colexec.ParallelUnorderedSynchronizer
│             │     ├ *colexec.ParallelUnorderedSynchronizer
│             │     └ *colexec.externalHashJoiner
│             │       ├ *colexec.bufferExportingOperator
│             │       └ *colexec.bufferExportingOperator
│             ├ *colrpc.Inbox
│             ├ *colrpc.Inbox
│             ├ *colrpc.Inbox
│             └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colexec.colBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colexec.colBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colexec.colBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colexec.colBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colexec.colBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colexec.colBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colexec.colBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colexec.colBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
