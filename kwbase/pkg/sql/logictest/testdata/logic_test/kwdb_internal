query error database "kwdb_internal" does not exist
ALTER DATABASE kwdb_internal RENAME TO not_kwdb_internal

statement error schema cannot be modified: "kwdb_internal"
CREATE TABLE kwdb_internal.t (x INT)

query error database "kwdb_internal" does not exist
DROP DATABASE kwdb_internal

query TT colnames
SHOW TABLES FROM kwdb_internal
----
table_name                    table_type
audit_policies                SYSTEM VIEW
backward_dependencies         SYSTEM VIEW
builtin_functions             SYSTEM VIEW
cluster_queries               SYSTEM VIEW
cluster_sessions              SYSTEM VIEW
cluster_settings              SYSTEM VIEW
cluster_transactions          SYSTEM VIEW
create_statements             SYSTEM VIEW
feature_usage                 SYSTEM VIEW
forward_dependencies          SYSTEM VIEW
gossip_alerts                 SYSTEM VIEW
gossip_liveness               SYSTEM VIEW
gossip_network                SYSTEM VIEW
gossip_nodes                  SYSTEM VIEW
index_columns                 SYSTEM VIEW
jobs                          SYSTEM VIEW
kv_node_status                SYSTEM VIEW
kv_store_status               SYSTEM VIEW
kwdb_attributes               SYSTEM VIEW
kwdb_functions                SYSTEM VIEW
kwdb_object_create_statement  SYSTEM VIEW
kwdb_procedures               SYSTEM VIEW
kwdb_retention                SYSTEM VIEW
kwdb_schedules                SYSTEM VIEW
kwdb_streams                  SYSTEM VIEW
kwdb_triggers                 SYSTEM VIEW
kwdb_tse_info                 SYSTEM VIEW
leases                        SYSTEM VIEW
node_build_info               SYSTEM VIEW
node_metrics                  SYSTEM VIEW
node_queries                  SYSTEM VIEW
node_runtime_info             SYSTEM VIEW
node_sessions                 SYSTEM VIEW
node_statement_statistics     SYSTEM VIEW
node_transactions             SYSTEM VIEW
node_txn_stats                SYSTEM VIEW
partitions                    SYSTEM VIEW
predefined_comments           SYSTEM VIEW
ranges                        SYSTEM VIEW
ranges_no_leases              SYSTEM VIEW
schema_changes                SYSTEM VIEW
session_trace                 SYSTEM VIEW
session_variables             SYSTEM VIEW
table_columns                 SYSTEM VIEW
table_indexes                 SYSTEM VIEW
tables                        SYSTEM VIEW
ts_inflight_transactions      SYSTEM VIEW
zones                         SYSTEM VIEW

statement ok
CREATE DATABASE testdb; CREATE TABLE testdb.foo(x INT)

query TIT
SELECT t.name, t.version, t.state FROM kwdb_internal.tables AS t JOIN system.namespace AS n ON (n.id = t.parent_id and n.name = 'testdb');
----
foo 1 PUBLIC

# Ensure there is a lease taken on foo.
query I
SELECT * FROM testdb.foo
----

# Check the lease.
query T
SELECT l.name FROM kwdb_internal.leases AS l JOIN system.namespace AS n ON (n.id = l.table_id and n.name = 'foo');
----
foo

# We merely check the column list for schema_changes.
query IITTITTT colnames
SELECT * FROM kwdb_internal.schema_changes
----
table_id parent_id name type target_id target_name state direction

# We don't select the modification time as it does not remain contant.
query IITTITTTTTTT colnames
SELECT table_id, parent_id, name, database_name, version, format_version, state, sc_lease_node_id, sc_lease_expiration_time, drop_time, audit_mode, schema_name FROM kwdb_internal.tables WHERE NAME = 'descriptor'
----
table_id  parent_id  name       database_name  version  format_version            state   sc_lease_node_id  sc_lease_expiration_time  drop_time  audit_mode  schema_name
3        1          descriptor  system         1        InterleavedFormatVersion  PUBLIC  NULL              NULL                      NULL       DISABLED    public

# Verify that table names are not double escaped.

statement ok
CREATE TABLE testdb." ""\'" (i int)

query T
SELECT NAME from kwdb_internal.tables WHERE DATABASE_NAME = 'testdb'
----
foo
"\'

query TT colnames
SELECT field, value FROM kwdb_internal.node_build_info WHERE field ILIKE 'name'
----
field value
Name  KaiwuDB

query T rowsort
SELECT field FROM kwdb_internal.node_build_info
----
Name
Build
ClusterID
Organization
Version
Channel


# The validity of the rows in this table are tested elsewhere; we merely assert the columns.
query ITTTTTTTTTTTTRTTIIIITTI colnames
SELECT * FROM kwdb_internal.jobs WHERE false
----
job_id  job_type  description  statement  user_name  descriptor_ids  status  running_status  created  started  finished  modified  errord  fraction_completed  high_water_timestamp  error  coordinator_id  total_num_of_ex  total_num_of_success  total_num_of_fail  time_of_last_success  created_by_type  created_by_id

query IITTITTT colnames
SELECT * FROM kwdb_internal.schema_changes WHERE table_id < 0
----
table_id  parent_id  name  type  target_id  target_name  state  direction

query IITITB colnames
SELECT * FROM kwdb_internal.leases WHERE node_id < 0
----
node_id  table_id  name  parent_id  expiration  deleted

query ITTTTIIITFFFFFFFFFFFFIIFITT colnames
SELECT * FROM kwdb_internal.node_statement_statistics WHERE node_id < 0
----
node_id  application_name  flags  key  anonymized  count  first_attempt_count  max_retries  last_error  rows_avg  rows_var  parse_lat_avg  parse_lat_var  plan_lat_avg  plan_lat_var  run_lat_avg  run_lat_var  service_lat_avg  service_lat_var  overhead_lat_avg  overhead_lat_var  bytes_read rows_read  implicit_txn  failed_count  user_name  database

query IITTTTTTT colnames
SELECT * FROM kwdb_internal.session_trace WHERE span_idx < 0
----
span_idx  message_idx  timestamp  duration  operation  loc  tag  message age

query TTTBT colnames
SELECT * FROM kwdb_internal.cluster_settings WHERE variable = ''
----
variable  value  type  public  description

query TI colnames
SELECT * FROM kwdb_internal.feature_usage WHERE feature_name = ''
----
feature_name  usage_count

query TTB colnames
SELECT * FROM kwdb_internal.session_variables WHERE variable = ''
----
variable  value  hidden

query TTITTTTTTBTI colnames
SELECT * FROM kwdb_internal.node_queries WHERE node_id < 0
----
query_id  txn_id  node_id  session_id user_name  start  query  client_address  application_name  distributed  phase exec_progress

query TTITTTTTTBTI colnames
SELECT * FROM kwdb_internal.cluster_queries WHERE node_id < 0
----
query_id  txn_id  node_id  session_id user_name  start  query  client_address  application_name  distributed  phase exec_progress

query TITTTT colnames
SELECT  * FROM kwdb_internal.node_transactions WHERE node_id < 0
----
id  node_id  session_id  start  txn_string  application_name

query TITTTT colnames
SELECT  * FROM kwdb_internal.cluster_transactions WHERE node_id < 0
----
id  node_id  session_id  start  txn_string  application_name

query ITTTTTTTTTTTTT colnames
SELECT * FROM kwdb_internal.node_sessions WHERE node_id < 0
----
node_id  session_id  goroutine_id  user_name  client_address  application_name  active_queries  last_active_query  session_start  oldest_query_start  kv_txn  alloc_bytes  max_alloc_bytes  connection_id

query ITTTTTTTTTTTTT colnames
SELECT * FROM kwdb_internal.cluster_sessions WHERE node_id < 0
----
node_id  session_id  goroutine_id  user_name  client_address  application_name  active_queries  last_active_query  session_start  oldest_query_start  kv_txn  alloc_bytes  max_alloc_bytes  connection_id

query TTTT colnames
SELECT * FROM kwdb_internal.builtin_functions WHERE function = ''
----
function  signature  category  details

query ITTITTTTTTTT colnames
SELECT * FROM kwdb_internal.create_statements WHERE database_name = ''
----
database_id  database_name  schema_name  descriptor_id  descriptor_type  descriptor_name  create_statement  state  create_nofks  alter_statements  validate_statements zone_configuration_statements

query ITITTBTB colnames
SELECT * FROM kwdb_internal.table_columns WHERE descriptor_name = ''
----
descriptor_id  descriptor_name  column_id  column_name  column_type  nullable  default_expr  hidden

query ITITTBB colnames
SELECT * FROM kwdb_internal.table_indexes WHERE descriptor_name = ''
----
descriptor_id  descriptor_name  index_id  index_name  index_type  is_unique  is_inverted

query ITITTITT colnames
SELECT * FROM kwdb_internal.index_columns WHERE descriptor_name = ''
----
descriptor_id  descriptor_name  index_id  index_name  column_type  column_id  column_name  column_direction

query ITIIITITT colnames
SELECT * FROM kwdb_internal.backward_dependencies WHERE descriptor_name = ''
----
descriptor_id  descriptor_name  index_id  column_id  dependson_id  dependson_type  dependson_index_id  dependson_name  dependson_details

query ITIITITT colnames
SELECT * FROM kwdb_internal.forward_dependencies WHERE descriptor_name = ''
----
descriptor_id  descriptor_name  index_id  dependedonby_id  dependedonby_type  dependedonby_index_id  dependedonby_name  dependedonby_details

query IITTTTTTTTTTT colnames
SELECT * FROM kwdb_internal.zones WHERE false
----
zone_id  subzone_id  target  range_name  database_name  table_name  index_name  partition_name
raw_config_yaml  raw_config_sql  raw_config_protobuf full_config_yaml full_config_sql

query ITTTTTTTTTTTTI colnames
SELECT * FROM kwdb_internal.ranges WHERE range_id < 0
----
range_id  start_key  start_pretty  end_key  end_pretty  database_name  table_name  index_name  replicas  replica_localities learner_replicas  split_enforced_until  lease_holder range_size

query ITTTTTTTITTTTT colnames
SELECT * FROM kwdb_internal.ranges_no_leases WHERE range_id < 0
----
range_id  range_type  start_key  start_pretty  end_key  end_pretty  database_name  table_name  table_id  index_name  replicas  replica_localities  learner_replicas  split_enforced_until

statement ok
INSERT INTO system.zones (id, config) VALUES
  (18, (SELECT raw_config_protobuf FROM kwdb_internal.zones WHERE zone_id = 0)),
  (53, (SELECT raw_config_protobuf FROM kwdb_internal.zones WHERE zone_id = 0))

query IT
SELECT zone_id, target FROM kwdb_internal.zones ORDER BY 1
----
0   RANGE default
1   DATABASE system
16  RANGE meta
17  RANGE system
18  RANGE timeseries
22  RANGE liveness
25  TABLE system.public.replication_constraint_stats
27  TABLE system.public.replication_stats

query T
SELECT quote_literal(raw_config_yaml) FROM kwdb_internal.zones WHERE zone_id = 0
----
e'range_min_bytes: 134217728\nrange_max_bytes: 536870912\ngc:\n  ttlseconds: 90000\nnum_replicas: 3\nconstraints: []\nlease_preferences: []\n'

query T
SELECT raw_config_sql FROM kwdb_internal.zones WHERE zone_id = 0
----
ALTER RANGE default CONFIGURE ZONE USING
  range_min_bytes = 134217728,
  range_max_bytes = 536870912,
  gc.ttlseconds = 90000,
  num_replicas = 3,
  constraints = '[]',
  lease_preferences = '[]'

query error pq: foo
SELECT kwdb_internal.force_error('', 'foo')

query error pgcode FOOYAA pq: foo
SELECT kwdb_internal.force_error('FOOYAA', 'foo')

query I
select kwdb_internal.force_retry(interval '0s')
----
0

query error pq: kwdb_internal.set_vmodule\(\): syntax error: expect comma-separated list of filename=N
select kwdb_internal.set_vmodule('not anything reasonable')

query I
select kwdb_internal.set_vmodule('doesntexist=2,butitsok=4')
----
0

query I
select kwdb_internal.set_vmodule('')
----
0

query T
select regexp_replace(kwdb_internal.node_executable_version()::string, '(-\d+)?$', '');
----
20.1

query ITTT colnames
select node_id, component, field, regexp_replace(regexp_replace(value, '^\d+$', '<port>'), e':\\d+', ':<port>') as value from kwdb_internal.node_runtime_info
----
node_id  component  field   value
1        DB         URL     postgresql://root@127.0.0.1:<port>?sslcert=test_certs%2Fclient.root.crt&sslkey=test_certs%2Fclient.root.key&sslmode=verify-full&sslrootcert=test_certs%2Fca.crt
1        DB         Scheme  postgresql
1        DB         User    root
1        DB         Host    127.0.0.1
1        DB         Port    <port>
1        DB         URI     /?sslcert=test_certs%2Fclient.root.crt&sslkey=test_certs%2Fclient.root.key&sslmode=verify-full&sslrootcert=test_certs%2Fca.crt
1        UI         URL     https://127.0.0.1:<port>
1        UI         Scheme  https
1        UI         User    ·
1        UI         Host    127.0.0.1
1        UI         Port    <port>
1        UI         URI     /

query ITTTTT colnames
SELECT node_id, network, regexp_replace(address, '\d+$', '<port>') as address, attrs, locality, regexp_replace(server_version, '^\d+\.\d+(-\d+)?$', '<server_version>') as server_version FROM kwdb_internal.gossip_nodes WHERE node_id = 1
----
node_id  network  address           attrs  locality            server_version
1        tcp      127.0.0.1:<port>  []     region=test,dc=dc1  <server_version>

query IITBB colnames
SELECT node_id, epoch, regexp_replace(expiration, '^\d+\.\d+,\d+$', '<timestamp>') as expiration, draining, decommissioning FROM kwdb_internal.gossip_liveness WHERE node_id = 1
----
node_id  epoch  expiration    draining  decommissioning
1        1      <timestamp>   false     false

query ITTTTTT colnames
SELECT node_id, network, regexp_replace(address, '\d+$', '<port>') as address, attrs, locality, regexp_replace(server_version, '^\d+\.\d+(-\d+)?$', '<server_version>') as server_version, regexp_replace(go_version, '^go.+$', '<go_version>') as go_version
FROM kwdb_internal.kv_node_status WHERE node_id = 1
----
node_id  network  address           attrs  locality            server_version    go_version
1        tcp      127.0.0.1:<port>  []     region=test,dc=dc1  <server_version>  <go_version>

query IITI colnames
SELECT node_id, store_id, attrs, used
FROM kwdb_internal.kv_store_status WHERE node_id = 1
----
node_id  store_id  attrs  used
1        1         []     0

statement ok
CREATE TABLE foo (a INT PRIMARY KEY, INDEX idx(a)); INSERT INTO foo VALUES(1)

statement ok
ALTER TABLE foo SPLIT AT VALUES(2)

query TTT colnames
SELECT start_pretty, end_pretty, split_enforced_until FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty  split_enforced_until
/Table/81/1/2  /Max        2262-04-11 23:47:16.854776 +0000 +0000

query TTT colnames
SELECT start_pretty, end_pretty, split_enforced_until FROM kwdb_internal.ranges_no_leases WHERE split_enforced_until IS NOT NULL AND table_name = 'foo'
----
start_pretty   end_pretty  split_enforced_until
/Table/81/1/2  /Max        2262-04-11 23:47:16.854776 +0000 +0000

statement ok
ALTER TABLE foo UNSPLIT AT VALUES(2)

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL AND table_name = 'foo'
----
start_pretty  end_pretty

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges_no_leases WHERE split_enforced_until IS NOT NULL AND table_name = 'foo'
----
start_pretty  end_pretty

statement ok
ALTER TABLE foo SPLIT AT VALUES(2) WITH EXPIRATION '2200-01-01 00:00:00.0'

query TTT colnames
SELECT start_pretty, end_pretty, split_enforced_until FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL AND table_name = 'foo'
----
start_pretty   end_pretty  split_enforced_until
/Table/81/1/2  /Max        2200-01-01 00:00:00 +0000 +0000

query TTT colnames
SELECT start_pretty, end_pretty, split_enforced_until FROM kwdb_internal.ranges_no_leases WHERE split_enforced_until IS NOT NULL AND table_name = 'foo'
----
start_pretty   end_pretty  split_enforced_until
/Table/81/1/2  /Max        2200-01-01 00:00:00 +0000 +0000

statement ok
ALTER TABLE foo SPLIT AT VALUES (1), (2), (3)

statement ok
ALTER TABLE foo UNSPLIT ALL

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges_no_leases WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty

# Make sure that the cluster id isn't unset.
query B
select kwdb_internal.cluster_id() != '00000000-0000-0000-0000-000000000000' FROM foo
----
true

# Check that privileged builtins are only allowed for 'root'
user testuser

query error insufficient privilege
select kwdb_internal.force_panic('foo')

query error insufficient privilege
select kwdb_internal.force_log_fatal('foo')

query error insufficient privilege
select kwdb_internal.set_vmodule('')

query error pq: only users with the admin role are allowed to access the node runtime information
select * from kwdb_internal.node_runtime_info

query error pq: only users with the admin role are allowed to read kwdb_internal.ranges
select * from kwdb_internal.ranges

query error pq: only users with the admin role are allowed to read kwdb_internal.gossip_nodes
select * from kwdb_internal.gossip_nodes

query error pq: only users with the admin role are allowed to read kwdb_internal.gossip_liveness
select * from kwdb_internal.gossip_liveness

query error pq: only users with the admin role are allowed to read kwdb_internal.node_metrics
select * from kwdb_internal.node_metrics

query error pq: only users with the admin role are allowed to read kwdb_internal.kv_node_status
select * from kwdb_internal.kv_node_status

query error pq: only users with the admin role are allowed to read kwdb_internal.kv_store_status
select * from kwdb_internal.kv_store_status

query error pq: only users with the admin role are allowed to read kwdb_internal.gossip_alerts
select * from kwdb_internal.gossip_alerts

# Anyone can see the executable version.
query T
select regexp_replace(kwdb_internal.node_executable_version()::string, '(-\d+)?$', '');
----
20.1

user root

# Regression test for #34441
query T
SELECT kwdb_internal.pretty_key(e'\\xa82a00918ed9':::BYTES, (-5096189069466142898):::INT8);
----
/Table/32/???/9/6/81

subtest max_retry_counter
# Verify that the max_retry counter in statement stats actually increases with retries.

statement ok
SET application_name = 'test_max_retry'

# Make the statement retry, to ensure max_retries increases to
# become different from 0.
statement OK
CREATE SEQUENCE s;
  SELECT IF(nextval('s')<3, kwdb_internal.force_retry('1h'::INTERVAL), 0);
  DROP SEQUENCE s

statement OK
RESET application_name

# Note: in the following test, three rows of output are expected:
# - one for the SELECT statements that failed with a retry error,
# - one for the final SELECT retry attempt that succeeded without an error,
# - one for the RESET statement.
#
# We expect the first two entries to have max_retries > 0 because
# auto-retries are expected by the server.
# We also expect the RESET statement to have max_retries = 0, because
# RESET never retries. This tests that the retry counter is properly
# reset to 0 between statements - a naive implementation could make
# the counter increase forever, even between statements.
#
query TIB
SELECT key, max_retries, flags LIKE '!%' AS f
  FROM kwdb_internal.node_statement_statistics
 WHERE application_name = 'test_max_retry'
ORDER BY key, f
----
CREATE SEQUENCE s                                           0  false
DROP SEQUENCE s                                             0  false
SELECT IF(nextval(_) < _, kwdb_internal.force_retry(_), _)  2  false
SELECT IF(nextval(_) < _, kwdb_internal.force_retry(_), _)  1  true
SET application_name = DEFAULT                              0  false


# Testing split_enforced_until when truncating and dropping.
statement ok
ALTER TABLE foo SPLIT AT VALUES (1), (2), (3)

statement ok
ALTER INDEX foo@idx SPLIT AT VALUES (1), (2), (3)

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty
/Table/81/1/1  /Table/81/1/2
/Table/81/1/2  /Table/81/1/3
/Table/81/1/3  /Table/81/2/1
/Table/81/2/1  /Table/81/2/2
/Table/81/2/2  /Table/81/2/3
/Table/81/2/3  /Max

statement ok
TRUNCATE TABLE foo

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty

statement ok
ALTER TABLE foo SPLIT AT VALUES (1), (2), (3)

statement ok
ALTER INDEX foo@idx SPLIT AT VALUES (1), (2), (3)

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty
/Table/83/1/1  /Table/83/1/2
/Table/83/1/2  /Table/83/1/3
/Table/83/1/3  /Table/83/2/1
/Table/83/2/1  /Table/83/2/2
/Table/83/2/2  /Table/83/2/3
/Table/83/2/3  /Max

statement ok
DROP TABLE foo

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty

statement ok
CREATE TABLE foo (a INT PRIMARY KEY, INDEX idx(a)); INSERT INTO foo VALUES(1)

statement ok
ALTER TABLE foo SPLIT AT VALUES (1), (2), (3)

statement ok
ALTER INDEX foo@idx SPLIT AT VALUES (1), (2), (3)

query TT colnames
SELECT start_pretty, end_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty   end_pretty
/Table/84/1/1  /Table/84/1/2
/Table/84/1/2  /Table/84/1/3
/Table/84/1/3  /Table/84/2/1
/Table/84/2/1  /Table/84/2/2
/Table/84/2/2  /Table/84/2/3
/Table/84/2/3  /Max

statement ok
DROP INDEX foo@idx

# Verify only the start keys of the manually split ranges because the merge queue could merge the
# ranges [/Table/85/1/3, /Table/85/2/1) with its right neighbors.
query T colnames
SELECT start_pretty FROM kwdb_internal.ranges WHERE split_enforced_until IS NOT NULL
----
start_pretty
/Table/84/1/1
/Table/84/1/2
/Table/84/1/3

query T
SELECT kwdb_internal.cluster_name()
----
testclustername

# Regression for 41834.
statement ok
CREATE TABLE table41834 ();
SELECT
	kwdb_internal.encode_key(
		-8912529861854991652,
		0,
		CASE
		WHEN false THEN (NULL,)
		ELSE (NULL,)
		END
	)
FROM
	table41834;


subtest builtin_is_admin

user root

query B
SELECT kwdb_internal.is_admin()
----
true

user testuser

query B
SELECT kwdb_internal.is_admin()
----
false
