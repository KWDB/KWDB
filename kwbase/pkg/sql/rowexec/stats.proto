// Copyright 2019 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";
package kwbase.sql.distsqlrun;
option go_package = "rowexec";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

// InputStats represents the stats collected from an input.
message InputStats {
  // num_rows is the number of rows received from the input.
  int64 num_rows = 1;
  // Duration in nanoseconds of the cumulative time spent stalled.
  google.protobuf.Duration stall_time = 8 [(gogoproto.nullable) = false,
                                        (gogoproto.stdduration) = true];
  // build_time only be used for hash tag scan op for multiple model processing
  // when the switch is on and the server starts with single node mode.
  google.protobuf.Duration build_time = 9 [(gogoproto.nullable) = false,
                                        (gogoproto.stdduration) = true];
}

// TableReaderStats are the stats collected during a tableReader run.
message TableReaderStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  int64 bytes_read = 2;
}

// TsTableReaderStats are the stats collected during a tsTableReader run.
message TsTableReaderStats {
  TableReaderStats input_stats = 1 [(gogoproto.nullable) = false];
  int32 porcessor_id =2;
}

// TsAggregatorStats are the stats collected during a TsAggregator run.
message TsAggregatorStats {
  AggregatorStats input_stats = 1 [(gogoproto.nullable) = false];
  int32 porcessor_id =2;
}

// TsSorterStats are the stats collected during a sorter run.
message TsSorterStats {
  SorterStats input_stats = 1 [(gogoproto.nullable) = false];
  int32 porcessor_id =2;
}

// TsInputStats are the stats collected during ts select run.
message TsInputStats {
  repeated TsTableReaderStats ts_table_reader_statss = 1 [(gogoproto.nullable) = false];
  repeated TsAggregatorStats ts_aggregator_statss = 2 [(gogoproto.nullable) = false];
  repeated TsSorterStats ts_sorter_statss = 3 [(gogoproto.nullable) = false];
}

// JoinReaderStats are the stats collected during a JoinReader run.
message JoinReaderStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  InputStats index_lookup_stats = 2 [(gogoproto.nullable) = false];
  reserved 3;
}

// HashJoinerStats are the stats collected during a hashJoiner run.
message HashJoinerStats {
  InputStats left_input_stats = 1 [(gogoproto.nullable) = false];
  InputStats right_input_stats = 2 [(gogoproto.nullable) = false];
  string stored_side = 3;
  int64 max_allocated_mem = 4;
  int64 max_allocated_disk = 5;
}

// BatchLookupJoinerStats are the stats collected during a batchLookupJoiner run.
message BatchLookupJoinerStats {
  InputStats left_input_stats = 1 [(gogoproto.nullable) = false];
  InputStats right_input_stats = 2 [(gogoproto.nullable) = false];
  string stored_side = 3;
  int64 max_allocated_mem = 4;
  int64 max_allocated_disk = 5;
  int64 batch_num = 6;
}

// AggregatorStats are the stats collected during an aggregator run.
message AggregatorStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  int64 max_allocated_mem = 2;
  int64 output_row_num = 3;
}

// DistinctStats are the stats collected during a distinct run.
message DistinctStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  int64 max_allocated_mem = 2;
}

// OrdinalityStats are the stats collected during a WITH ORDINALITY run.
message OrdinalityStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
}

// MergeJoinerStats are the stats collected during a mergeJoiner run.
message MergeJoinerStats {
  InputStats left_input_stats = 1 [(gogoproto.nullable) = false];
  InputStats right_input_stats = 2 [(gogoproto.nullable) = false];
  int64 max_allocated_mem = 3;
}

// SorterStats are the stats collected during a sorter run.
message SorterStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  int64 max_allocated_mem = 2;
  int64 max_allocated_disk = 3;
}

// WindowerStats are the stats collected during a windower run.
message WindowerStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
  int64 max_allocated_mem = 2;
  int64 max_allocated_disk = 3;
}

// NoopStats are the stats collected during a noop run.
message NoopStats {
  InputStats input_stats = 1 [(gogoproto.nullable) = false];
}
