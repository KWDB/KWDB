// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto2";

package kwbase.sql.distsqlrun;
option go_package = "execinfrapb";

import "sql/execinfrapb/data.proto";
import "gogoproto/gogo.proto";
import "sql/sqlbase/structured.proto";
import "sql/execinfrapb/processors_sql.proto";
import "sql/execinfrapb/processors_base.proto";

import "cdc/cdcpb/cdc.proto";

// TableDescArray is a slice of TableDesc.
message TableDescArray {
  repeated TableDesc table = 1 [(gogoproto.nullable) = false];
}

// TableDesc is a desc that has table id and all column id.
message TableDesc {
  optional uint64 tableID = 1 [(gogoproto.nullable) = false];

  repeated uint32 colIDs = 2 ;
}

// TSSynchronizerSpec operator
message TSSynchronizerSpec{
  // Parallelism degree
  optional int32 degree = 1 [(gogoproto.nullable) = false];
}

message TsSpan {
  optional int64 fromTimeStamp = 1 [(gogoproto.nullable) = false];

  optional int64 toTimeStamp = 2 [(gogoproto.nullable) = false];
}

enum TSTableReadMode {
  tagIndex = 0;
  tagIndexTable = 1;
  tableTableMeta = 2;
  metaTable = 3;
  hashTagScan = 4;
  primaryHashTagScan = 5;
  hashRelScan = 6;
  tagHashIndex = 7;
}

message TSBlockFilter {
  // filter type
  enum type {
    T_SPAN = 0;  // span
    T_NULL = 1;  // is null
    T_NOTNULL = 2; // is not null
  }
  // filter span
  message Span {
    // Boundary type
    enum SpanBoundary {
      IncludeBoundary = 0; // include
      ExcludeBoundary= 1;  // exclude
    }
    optional string start = 1; // left value
    optional string end = 2;  // right value
    optional SpanBoundary startBoundary= 3; // left boundary type
    optional SpanBoundary endBoundary= 4; // right boundary type
  }
  required uint32 colID = 1;   // column id
  required type filterType = 2; // filter type
  repeated Span columnSpan = 3; // multi filter spans
}

// TSReaderSpec table reader
message TSReaderSpec {
  // time range
  repeated TsSpan ts_spans = 1 [(gogoproto.nullable) = false];
  // table id
  required uint64 tableID = 2 [(gogoproto.nullable) = false];
  // use offsetOpt flag
  required bool offsetOpt = 3 [(gogoproto.nullable) = false];

  // Metadata for all columns, excluding column ids
  repeated sqlbase.TSCol colMetas = 4;

  optional bool   reverse = 5;
  optional AggregatorSpec   aggregator = 6;
  optional PostProcessSpec   aggregatorPost = 7;
  optional bool   aggPushDown = 8;

  // table version
  required uint32 tableVersion = 9 [(gogoproto.nullable) = false];
  optional Ordering sorter = 10;
  required int32 TsTablereaderId = 11 [(gogoproto.nullable) = false];
  required bool OrderedScan = 12 [(gogoproto.nullable) = false];
  repeated TSBlockFilter blockFilter = 13;
}

// StatisticTSTableReader operator
message TSStatisticReaderSpec {
  // Time interval
  repeated TsSpan tsSpans = 1 [(gogoproto.nullable) = false];
  // ID of the table to be queried
  required uint64 tableID = 2 [(gogoproto.nullable) = false];

  // agg function param
  message ParamInfo {
    enum type {
      colID = 0;
      const = 1;
    }

    required type typ = 1 [(gogoproto.nullable) = false];

    required int64 value = 2 [(gogoproto.nullable) = false];
  }

  message Params {
    repeated ParamInfo param = 1 [(gogoproto.nullable) = false];
  }

  // Columns for querying statistics. Column indexes start at 0
  repeated Params paramIdx = 3 [(gogoproto.nullable) = false];
  // TSTableReader column agg type
  repeated int32 aggTypes = 4;
  // Metadata for all columns, excluding column ids
  repeated sqlbase.TSCol tsCols = 5  [(gogoproto.nullable) = false];
  // table version
  required uint32 tableVersion = 6 [(gogoproto.nullable) = false];

  optional bool scalar = 7 [(gogoproto.nullable) = false];

  required bool LastRowOpt = 8 [(gogoproto.nullable) = false];
}
message HashpointSpan{
  required uint32 hashpoint = 1 [(gogoproto.nullable) = false];
  repeated TsSpan tspans = 2 [(gogoproto.nullable) = false];
}

// TagTSTableReader operator
message TSTagReaderSpec {
  // ID of the table to be queried
  required uint64 tableID = 1 [(gogoproto.nullable) = false];

  // Metadata for all columns, excluding column ids
  repeated sqlbase.TSCol colMetas = 2 [(gogoproto.nullable) = false];
  // primary tag values , Union PTags must appear in pairs to populate primarytags
  // By default, all tags have the same values
  message TagValueArray {
    // column id of primary tag
    optional uint32 colid = 1 [(gogoproto.nullable) = false];
    // values of primary tag
    repeated string tagValues = 2;
  }
  repeated TagValueArray primaryTags = 3 [(gogoproto.nullable) = false];
  required TSTableReadMode accessMode = 4 [(gogoproto.nullable) = false];
  // table version
  required uint32 tableVersion = 5 [(gogoproto.nullable) = false];
  repeated HashpointSpan rangeSpans = 6 [(gogoproto.nullable) = false];
  //relational data
  repeated sqlbase.TSCol  relationalCols = 7 [(gogoproto.nullable) = false];
  repeated uint32 probeColids = 8;
  repeated uint32 hashColids = 9;
  required bool only_tag = 10 [(gogoproto.nullable) = false];
  // UnionType represents relation of multi tag indexes
  required uint32 UnionType = 11 [(gogoproto.nullable) = false];
  repeated uint32 TagIndexIDs = 12;
  // Tag index values
  // TagIndexValueArray represents a mapping from a column id to an array of tag values.
  message TagIndexInfo {
    repeated TagValueArray TagValues = 1[(gogoproto.nullable) = false];
  }
  repeated TagIndexInfo TagIndexes = 13 [(gogoproto.nullable) = false];
}

enum SketchMethod {
  // Computes the count-distinct statistical algorithm for columns
  HLL_PLUS_PLUS = 0;
}

// Time series statistic info
message TSSamplerSpec {
  // Sketch info for all statsCols
  repeated SketchInfo sketches = 1 [(gogoproto.nullable) = false];
  // Size of sampled data
  required uint32 sample_size = 2;
  // Table id
  required uint64 table_id = 3 [(gogoproto.nullable) = false];
}

// SketchSpec contains the specification for a generated statistic.
message SketchInfo {
  // Column base calculation method
  optional SketchMethod sketch_type = 1 [(gogoproto.nullable) = false];

  // Whether generate histogram
  required bool GenerateHistogram = 2 [(gogoproto.nullable) = false];

  // ColumnIDxs of stats
  repeated uint32 col_idx = 4;

  // Columns of type;
  // 0 :normal columns
  // 1 :tag
  // 2 :primary tag
  repeated uint32 col_types = 5;

  // Whether has all primary tag columns
  required bool HasAllPTag = 6 [(gogoproto.nullable) = false];

  // SortedHistogram supports sorted histogram collection for entities in time series tables
  optional sqlbase.SortedHistogramInfo sortedHistogram = 7 [(gogoproto.nullable) = false];
}

// StreamReaderSpec contains the specification for a stream metadata that will used to process the captured change data.
message StreamReaderSpec {
  optional cdcpb.StreamMetadata metadata = 1;
  optional int64 job_id = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "JobID"
  ];
  optional cdcpb.CDCColumns cdc_columns = 3 [(gogoproto.customname) = "CDCColumns"];

  repeated uint32 orderingColumnIDs = 4[(gogoproto.customname) = "OrderingColumnIDs"];
  repeated bytes target_col_types = 5 [(gogoproto.customname) = "TargetColTypes", (gogoproto.customtype) = "gitee.com/kwbasedb/kwbase/pkg/sql/types.T"];
}

message StreamAggregatorSpec{
  optional cdcpb.StreamMetadata metadata = 1;
  optional AggregatorSpec agg_spec = 2;
}

