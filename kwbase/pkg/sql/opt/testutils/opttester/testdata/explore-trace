exec-ddl
CREATE TABLE ab (a INT PRIMARY KEY, b INT, INDEX(b))
----

exploretrace
SELECT * FROM ab WHERE b=1
----
----
================================================================================
GenerateIndexScans
================================================================================
Source expression:
  select
   ├── columns: a:1(int4!null) b:2(int4!null)
   ├── key: (1)
   ├── fd: ()-->(2)
   ├── scan ab
   │    ├── columns: a:1(int4!null) b:2(int4)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── filters
        └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
             ├── variable: b:2 [type=int4]
             └── const: 1 [type=int]

New expression 1 of 1:
  select
   ├── columns: a:1(int4!null) b:2(int4!null)
   ├── key: (1)
   ├── fd: ()-->(2)
   ├── scan ab@secondary
   │    ├── columns: a:1(int4!null) b:2(int4)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── filters
        └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
             ├── variable: b:2 [type=int4]
             └── const: 1 [type=int]

================================================================================
GenerateZigzagJoins
================================================================================
Source expression:
  select
   ├── columns: a:1(int4!null) b:2(int4!null)
   ├── key: (1)
   ├── fd: ()-->(2)
   ├── scan ab
   │    ├── columns: a:1(int4!null) b:2(int4)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── filters
        └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
             ├── variable: b:2 [type=int4]
             └── const: 1 [type=int]

No new expressions.

================================================================================
GenerateConstrainedScans
================================================================================
Source expression:
  select
   ├── columns: a:1(int4!null) b:2(int4!null)
   ├── key: (1)
   ├── fd: ()-->(2)
   ├── scan ab
   │    ├── columns: a:1(int4!null) b:2(int4)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── filters
        └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
             ├── variable: b:2 [type=int4]
             └── const: 1 [type=int]

New expression 1 of 1:
  scan ab@secondary
   ├── columns: a:1(int4!null) b:2(int4!null)
   ├── constraint: /2/1: [/1 - /1]
   ├── key: (1)
   └── fd: ()-->(2)
----
----

exec-ddl
CREATE TABLE parent (pid INT PRIMARY KEY, pa INT)
----

exec-ddl
CREATE TABLE child (
  pid INT,
  cid INT,
  ca INT,
  PRIMARY KEY(pid, cid)
)
----

exec-ddl
CREATE TABLE grandchild (
  pid INT,
  cid INT,
  gcid INT,
  gca INT,
  PRIMARY KEY(pid, cid, gcid)
)
----
