// Copyright 2017 The Cockroach Authors.
// Copyright (c) 2022-present, Shanghai Yunxi Technology Co, Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This software (KWDB) is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto2";
package kwbase.roachpb;
option go_package = "roachpb";

import "gogoproto/gogo.proto";


message IOFileFormat {
  enum FileFormat {
    Unknown = 0;
    CSV = 1;
    SQL = 2;
  }

  optional FileFormat format = 1 [(gogoproto.nullable) = false];
  optional CSVOptions csv = 2 [(gogoproto.nullable) = false];
}

// CSVOptions describe the format of csv data (delimiter, comment, etc).
message CSVOptions {
  // comma is an delimiter used by the CSV file; defaults to a comma.
  optional int32 comma = 1 [(gogoproto.nullable) = false];
  // null_encoding, if not nil, is the string which identifies a NULL. Can be the empty string.
  optional string null_encoding = 2 [(gogoproto.nullable) = true];
  // skip the first N lines of the input (e.g. to ignore column headers) when reading.
  optional uint32 skip = 3 [(gogoproto.nullable) = false];
  optional int32 escaped = 4 [(gogoproto.nullable) = false];
  optional int32 enclosed = 5 [(gogoproto.nullable) = false];
  optional int32 threads = 6 [(gogoproto.nullable) = false];
  optional int32 batchRows = 7 [(gogoproto.nullable) = false];
  optional bool autoShrink = 8 [(gogoproto.nullable) = false];
  optional string charset = 9 [(gogoproto.nullable) = false];
}

// MySQLOutfileOptions describe the format of mysql's outfile.
message MySQLOutfileOptions {
  enum Enclose {
    Never = 0;
    Always = 1;
    Optional = 2;
  }

  // row_separator is the delimiter between rows (mysql's --rows-terminated-by)
  optional int32 row_separator = 1 [(gogoproto.nullable) = false];
  // field_separator is the delimiter between fields (mysql's --fields-terminated-by)
  optional int32 field_separator = 2 [(gogoproto.nullable) = false];
  // enclose is the enclosing (quoting) behavior (i.e. if specified and if optional).
  optional Enclose enclose = 3 [(gogoproto.nullable) = false];
  // encloser is the character used to enclose (qupte) fields (--fields-enclosed-by)
  optional int32 encloser = 4 [(gogoproto.nullable) = false];
  // has_escape indicates that an escape character is set (mysql's default is not).
  optional bool has_escape = 5 [(gogoproto.nullable) = false];
  // escape is the character used to prefix the other delimiters (--fields-escaped-by)
  optional int32 escape = 6 [(gogoproto.nullable) = false];
  // skip the first N lines of the input (e.g. to ignore column headers) when reading.
  optional uint32 skip = 7 [(gogoproto.nullable) = false];
  // null_encoding, if not nil, is the string which identifies a NULL. Can be the empty string.
  optional string null_encoding = 8 [(gogoproto.nullable) = true];
  reserved 9;
}

// PgCopyOptions describe the format of postgresql's COPY TO STDOUT.
message PgCopyOptions {
  // delimiter is the delimitor between columns (DELIMITER)
  optional int32 delimiter = 1 [(gogoproto.nullable) = false];
  // null is the NULL value (NULL)
  optional string null = 2 [(gogoproto.nullable) = false];
  // maxRowSize is the maximum row size
  optional int32 maxRowSize = 3 [(gogoproto.nullable) = false];
}

// PgDumpOptions describe the format of postgresql's pg_dump.
message PgDumpOptions {
  // maxRowSize is the maximum row size
  optional int32 maxRowSize = 1 [(gogoproto.nullable) = false];
}

message AvroOptions {
  enum Format {
    // Avro object container file input
    OCF = 0;
    // Input file contains avro binary encoded records; one record per line
    BIN_RECORDS = 1;
    // Input file contains avro JSON encoded records; one record per line
    JSON_RECORDS =2;
  }

  optional Format format = 1 [(gogoproto.nullable) = false];

  // Strict mode import will reject avro records that do not have
  // a one-to-one mapping to our target schema.
  // The default is to ignore unknown avro fields, and to set any missing
  // columns to null value if they were not set in the avro record.
  optional bool strict_mode = 2 [(gogoproto.nullable) = false];

  // Applicable for records only.
  optional string schemaJSON = 3 [(gogoproto.nullable) = false];
  optional int32 max_record_size = 4 [(gogoproto.nullable) = false];
  optional int32 record_separator = 5 [(gogoproto.nullable) = false];
}
